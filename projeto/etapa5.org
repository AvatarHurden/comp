# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+Title: Projeto de Compilador: *Etapa 5 de Geração de Código*
#+Author: Lucas Mello Schnorr
#+Date: schnorr@inf.ufrgs.br
#+Language: pt-br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

A quinta etapa do trabalho de implementação de um compilador para a
Linguagem consiste na geração de código intermediário a partir da
árvore sintática abstrata (AST). Utilizaremos como representação
intermediária a Linguagem ILOC, descrita em detalhes no apêndice A de
/Engineering a Compiler/ \cite{keith}, mas com o essencial na Seção
\ref{iloc} deste documento.  Testes poderão ser realizados através de
um simulador simples escrito em Python3 e já disponível no repositório
git de referência (em \emph{scripts}, etapa 5, \texttt{ilocsim}).

* Funcionalidades Necessárias
\label{funcionalidades}

** Arranjos Multidimensionais                                     :noexport:
Altere a gramática para suportar arranjos multidimensionais. A forma
=tipo nome[n1][n2]...[n]= deve ser utilizada na declaração. No acesso a
elementos dos arranjos, utilize =id[n1][n2]...[n]= quando existem duas
dimensões, sendo que =num= deve ser um inteiro positivo. O valor de =num=
no acesso pode ser oriundo de uma expressão aritmética. Arranjos
aparecem em qualquer escopo, mas jamais são parâmetros. Veja:

#+BEGIN_EXAMPLE
float arranjo[10][40][30];
int funcao_com_arranjos ()
{
   int a;
   int b;
   float c;
   arranjo[a+b][b+c][10*a] = 3;
   a = arranjo[a+b][b+c][10*a];
}
#+END_EXAMPLE

** Estrutura de Dados para ILOC

Implementa uma estrutura de dados para conter o código da operação e
os argumentos necessários para cada operação (consulte a Seção
\ref{iloc-tabelas} para saber quais são as operações válidas em ILOC e
seus argumentos). Note que os argumentos das operações são nomes de
registradores, valores constantes, ou nomes de rótulos. _Além disso_,
implementa uma estrutura de dados para manter uma lista de instruções
ILOC. Dentre as várias forma de implementar, utilize aquela que mais
se adequa ao uso em um compilador.

** Rótulos e Registradores

Uma função deve ser adicionada ao projeto de compilador para fornecer
nomes de rótulos a serem utilizados na geração de código. Os nomes são
utilizados para marcar os pontos de desvio no fluxo de execução. Todas
as instruções ILOC devem ser realizadas sobre valores que estão em
registradores. Sendo assim, uma função deve ser adicionada ao projeto
de compilador para gerenciar a criação de nomes de registradores. Os
nomes de rótulos e registradores devem seguir a convenção de nomes
especificada na Seção \ref{iloc}. Os registradores podem ser vistos
como variáveis temporárias auxiliares.

** Geração de Código

Existem pelo menos duas possibilidades de implementação válidas:

1. *Em uma passagem*: realizar eventuais alterações gramaticais para
   realizar a geração de código em uma única passagem (juntamente com
   a análise léxica, sintática e semântica).

2. *Em duas passagens*: Outra é optar por fazer o processo de geração de
   código em uma segunda passagem sobre a AST, através da
   implementação de uma função que faça o percorrimento.

Informe o professor da sua escolha. Em ambos os casos, ao
final da execução, o compilador deve ter na raiz da árvore AST um
ponteiro para todo o código intermediário ILOC do programa de entrada.
A geração de código consiste na criação de uma ou mais instruções ILOC
juntamente com a união de trechos das sub-árvores, com a criação de
novos símbolos intermediários e rótulos conforme necessário. Nesta
etapa, deve-se traduzir as seguintes construções da linguagem:

- Cálculo de endereço na declaração de variáveis
  - Endereço de variáveis locais são um deslocamento em relação ao
    registrador especial =fp= (ou =rarp=)
  - Endereço de variáveis globais são um deslocamento em relação ao registrador especial =rbss=
- Expressões Aritméticas
- Expressões Booleanas com curto-circuito
- Arranjos Multidimensionais
- Comandos de Atribuição
- Comandos de Fluxo de Controle (a implementação do =switch= é opcional, mas encorajada)

Por simplicidade, os programas deverão conter _apenas uma função_ chamada =main=.

* Discussão Importante

Na tradução para ILOC, deve-se considerar que o conteúdo de cada
variável da Linguagem está em um endereço de memória. Este endereço
deve ser calculado no momento da declaração da variável considerando o
escopo atual e seu endereço base. Antes de realizar qualquer operação
sobre uma variável, deve-se antes de tudo carregar o seu conteúdo (a
partir de um endereço de memória) para um registrador (utilizando a
operação =load=, por exemplo), para só então realizar a operação
sobre a variável. Ao final desta operação, o valor resultante estará
obrigatoriamente em um registrador. Este valor final deve ser
transferido para o endereço da variável na memória (utilizando a
operação =store=, por exemplo).

* Dicas de Desenvolvimento
Abaixo listam-se algumas dicas de desenvolvimento que podem ser úteis.

** Instruções

As instruções em código intermediário servem para isolar as tarefas de
geração da sequência básica de instruções dos detalhes e formato
específicos de uma arquitetura alvo. Além disso, a geração usada nesse
trabalho emprega técnicas genéricas de forma funcional, didática, mas
pode ser otimizada de várias formas antes da geração de código
assembly. Dois exemplos de otimização são a reutilização de símbolos
temporários em expressões e o uso de registradores. Entretanto, essas
otimizações não fazem parte desta etapa do trabalho e são portanto opcionais.

** Geração de Código

A geração de código será feita de baixo para cima e da esquerda para a
direita, na árvore. O modo mais simples de encadear novas instruções é
representar os trechos de código como listas encadeadas invertidas,
isto é, com um ponteiro para a última instrução de um trecho, e cada
instrução apontando para a anterior. Ao final da geração, escreva uma
função que percorre o código completo e inverte a lista de forma que
se possa escrever o código na ordem em que deve ser executado.

** Funções Auxiliares

Para a geração de código, além das rotinas utilitárias de TACs e da
rotina recursiva principal que percorre a AST, utilize outras funções
auxiliares. Isto tem dois motivos: primeiro, a semelhança na geração
de código em vários nós da árvore, especialmente nas expressões
aritméticas e relacionais. Segundo, evitar o tamanho da função de
geração. Ela deve realizar um \texttt{switch(node->type)} e chamar a
função auxiliar de geração de código apropriada para o tipo deste nó
da AST.

** Entrada e Saída Padrão

Organize a sua solução para que o compilador leia o programa da
entrada padrão e gere o programa em ILOC na saída padrão. Dessa forma,
pode-se realizar o seguinte comando (considerando que \texttt{main} é
o binário do compilador):
#+BEGIN_EXAMPLE
./main < entrada.poa > saida.iloc
#+END_EXAMPLE

Onde =entrada.poa= contém um programa na linguagem sendo compilada, e =saida.iloc= contém em ILOC traduzido.

\bibliographystyle{plain}
\bibliography{biblio}

* A Linguagem ILOC
\label{iloc}

ILOC[fn:1]  é uma representação intermediária
parecida com assembly para uma máquina RISC abstrata. A máquina
abstrata que executa ILOC tem um número ilimitado de
registradores. ILOC é um código de três endereços com operações de
registrador a registrador, operações de carga (=load=) e
armazenamento (=store=), comparações e desvios. Suporta apenas
modos de endereçamento simples, tais como -- direto, endereço +
offset, endereço + imediato, e imediato. Os operandos são lidos no
início do ciclo quem uma operação começa a ser executada. Os operandos
resultantes da operação se tornam definidos no final do ciclo no qual
a operação se completa.

[fn:1] Este texto é uma tradução simplificada do apêndice A do
livro do Keith \cite{keith}.

** Gramática da Linguagem ILOC

Um programa ILOC consiste em uma lista sequencial de instruções. Cada
instrução pode ser precedida por um rótulo. Um rótulo é apenas uma
cadeia de caracteres sendo separada da instrução por dois pontos. Por
convenção, limita-se o formato dos rótulos com a expressão regular
=[a-z]([a-z]|[0-9]|-)*=. Se alguma instrução precisa de mais de
um rótulo, deve ser inserido uma instrução que contém apenas um
operação =nop= antes dela, colocando o rótulo adicional na
instrução =nop=. Um programa ILOC é definido mais formalmente:

| ProgramaILOC    | \rightarrow | ListaInstrucoes                                           |
| ListaInstrucoes | \rightarrow | Instrucao \vert =label:= Instrucao \vert  Instrucao ListaInstrucoes |

Cada instrução pode conter uma ou mais operações. Uma instrução com
uma única operação é escrita em uma linha própria, enquanto que uma
instrução com múltiplas operações pode ser escrita em várias
linhas. Para agrupar operações em uma instrução única, nós envolvemos
a lista de operações entre colchetes e separamos cada operações com
ponto e vírgulas. Mais formalmente:

| Instrucao      | \rightarrow | Operacao \vert =[= ListaOperacoes =]=        |
| ListaOperacoes | \rightarrow | Operacao \vert Operacao =;= ListaOperacoes |

Uma operação ILOC corresponde a uma instrução em nível de máquina que
pode ser executada por uma única unidade funcional em um único
ciclo. Ela tem um código de operação (=opcode=), uma sequência de
operandos fontes separados por vírgulas, e uma sequência de operandos
alvo separados também por vírgulas. Os operandos fonte são separados
dos operandos alvo pelo símbolo ``=>'', que significa
``em''. Formalmente:

| Operacao       | \rightarrow | OperacaoNormal \vert OperacaoFluxoControle                   |
| OperacaoNormal | \rightarrow | CodigoOperacao ListaOperandos \texttt{=>} ListaOperandos |
| ListaOperandos | \rightarrow | Operando \vert Operando \texttt{,} ListaOperandos            |
| Operando       | \rightarrow | =registrador= \vert =numero= \vert =rotulo=                            |


O não-terminal /CodigoOperacao/ pode ser qualquer operação ILOC,
exceto =cbr=, =jump=, e =jumpI=. As tabelas na
seção~\ref{iloc-tabelas} mostram o número de operandos e seus tipos
para cada operação da Linguagem ILOC.

Um /Operando/ pode ser um de três tipos: =registrador=,
=numero= e =rotulo=. O tipo de cada operando é
determinado pelo código da operação e a posição que o operando aparece
na operação. Por convenção, os registradores começam pela letra
=r= (minúscula) e são seguidos por um número inteiro ou uma
cadeia de caracteres qualquer. Ainda por convenção, rótulos sempre
começam pela letra =L= (maiúscula).

A maioria das operações tem um único operando alvo; algumas operações
de armazenamento (\emph{store}) tem operandos alvos múltiplos, assim
como saltos. Por exemplo, =storeAI= tem um único operando fonte
e dois operandos alvo. A fonte deve ser um registrador, e os alvos
devem ser um registrador e uma constante imediata. Então, a operação
da linguagem ILOC:

=storeAI ri => rj,4= 

calcula o endereço adicionando =4= ao conteúdo de =rj= e
armazena o valor encontrado no registrador =ri= na localização da
memória especificada pelo endereço calculado. Em outras palavras:

\textsc{Memória}(=rj + 4=) $\leftarrow$ \textsc{Conteúdo}(=ri=)

Operações de fluxo de controle tem sintática diferente. Uma vez que
estas operações não definem seus alvos, elas são escritas com uma
flecha simples =->= ao invés da flecha dupla
==>=. Formalmente:

| OperacaoFluxoControle | \rightarrow | =cbr register -> label, label= |
|                       | \vert | =jumpI -> label=               |
|                       | \vert | =jumpI -> register=            |


A primeira operação, =cbr=, implementa um desvio
condicional. As outras duas operações são desvios incondicionais.

** Convenções de Nome

O código ILOC usa um conjunto simples de convenções de nome.

1. Deslocamentos de memória para variáveis são representados
  simbolicamente com um =@= antes do nome da variável.

2. Existe um número ilimitado de registradores. Estes são nomeados
  com inteiros simples, como =r1789=, ou com nomes simbólicos,
  como em =ri= ou =rj=.

3. O registrador =fp= ou =rarp= é reservado como um ponteiro para o
  registro de ativação atual. Sendo assim, a operação:

  =loadAI rarp,@x => r1=

  carrega o conteúdo da variável =x=, guardada no deslocamento
  =@x= a partir do =rarp=, em =r1=.

Comentários em ILOC começam com =//= e continuam até o final da
linha.

** Operações Individuais
*** Aritmética

A Linguagem ILOC tem operações de três endereços de registrador para registrador.

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte}  &        & {\bf Alvo} & {\bf Significado} \\\toprule
\et{add}     & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 + r2$ \\
\et{sub}     & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 - r2$ \\
\et{mult}    & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 * r2$ \\
\et{div}     & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 / r2$ \\\midrule
\et{addI}    & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 + c2$ \\
\et{subI}    & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 - c2$ \\
\et{rsubI}   & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = c2 - r1$ \\
\et{multI}   & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 * c2$ \\
\et{divI}    & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 / c2$ \\
\et{rdivI}   & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = c2 / r1$ \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

Todas estas operações realizam a leitura dos operandos origem de
registradores ou constantes e escrevem o resultado de volta para um
registrador. Qualquer registrador pode servir como um operando origem
ou destino.

As primeiras quatro operações da tabela são operações registrador para
registrador clássicas. As próximas seis especificam um operando
imediato. As operações não comutativas, \et{sub} e \et{div}, tem duas
formas imediatas alternativas para permitir o operando imediato em
qualquer lado do operador. As formas imediatas são úteis para
expressar resultados de certas otimizações, para escrever exemplos de
forma mais concisa, e para registrar jeitos óbvios de reduzir a
demanda por registradores.

*** Shifts

ILOC suporta um conjunto de operações aritméticas de \emph{shift},
para a esquerda e para a direita, em ambas as formas, com
registradores e imediata.

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte}  &        & {\bf Alvo} & {\bf Significado} \\\toprule
\et{lshift}  & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 << r2$ \\
\et{lshiftI} & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 << c2$ \\
\et{rshift}  & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 >> r2$ \\
\et{rshiftI} & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 >> c2$ \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT


*** Operações sobre a Memória

ILOC suporta um conjunto de operadores de carga e armazenamento para
mover valores entre a memória e registradores. As operações \et{load}
e \et{cload} movem dados da memória para os registradores.

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte}  &        & {\bf Alvo} & {\bf Significado} \\\toprule
\et{load}    & \et{r1}      & \ARROW & \et{r2}    & $r2 =$ \textsc{Memoria}($r1$) \\
\et{loadAI}  & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 =$ \textsc{Memoria}($r1 + c2$) \\
\et{loadA0}  & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 =$ \textsc{Memoria}($r1 + r2$) \\
\et{cload}   & \et{r1}     & \ARROW & \et{r2}     & caractere \et{load} \\
\et{cloadAI} & \et{r1, c2} & \ARROW & \et{r3}     & caractere \et{loadAI} \\
\et{cloadA0} & \et{r1, r2} & \ARROW & \et{r3}     & caractere \et{loadA0} \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

As operações diferem nos modos de endereçamento que elas suportam. As
operações \et{load} e \et{cload} assumem um endereço direto na forma
de um único operando registrador. As operações \et{loadAI} e
\et{cloadAI} adicionam um valor imediato ao conteúdo do registrador
para formar um endereço imediatamente antes de realizar a carga. Nós
chamamos estas de operações de \emph{endereçamento imediato}. As
operações \et{loadA0} e \et{cloadA0} adicionam o conteúdo de dois
registradores para calcular o endereço efetivo imediatamente antes de
realizar a carga. Estas operações são chamadas de \emph{endereçamento
  por deslocamento}.

Uma outra forma de carga que a Linguagem ILOC suporta é uma operação
\et{loadI} de carga imediata. Ela recebe um inteiro como argumento e
coloca este inteiro dentro do registrador alvo.

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte}  &        & {\bf Alvo} & {\bf Significado} \\\toprule
\et{loadI}    & \et{c1}      & \ARROW & \et{r2}    & $r2 = c1$ \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

As operações de armazenamento são semelhantes, conforme a tabela abaixo.

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte}  &        & {\bf Alvo}     & {\bf Significado} \\\toprule
\et{store}    & \et{r1}     & \ARROW & \et{r2}        & \textsc{Memoria}($r2$) $= r1$ \\
\et{storeAI}  & \et{r1}     & \ARROW & \et{r2, c3}    & \textsc{Memoria}($r2 + c3$) $= r1$ \\
\et{storeA0}  & \et{r1}     & \ARROW & \et{r2, r3}    & \textsc{Memoria}($r2 + r3$) $= r1$\\
\et{cstore}   & \et{r1}     & \ARROW & \et{r2}        & caractere \et{store} \\
\et{cstoreAI} & \et{r1}     & \ARROW & \et{r2, c3}    & caractere \et{storeAI} \\
\et{cstoreA0} & \et{r1}     & \ARROW & \et{r2, r3}    & caractere \et{storeA0} \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

Não há nenhuma operação de armazenamento imediato.

*** Operações de Cópia entre Registradores

A Linguagem ILOC tem um conjunto de operações para mover valores entre
registradores, sem passar pela memória.

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte} &        & {\bf Alvo}     & {\bf Significado} \\\toprule
\et{i2i}     & \et{r1}     & \ARROW & \et{r2}        & $r2 = r1$ para inteiros \\
\et{c2c}     & \et{r1}     & \ARROW & \et{r2}        & $r2 = r1$ para caracteres \\
\et{c2i}     & \et{r1}     & \ARROW & \et{r2}        & converte um caractere para um inteiro\\
\et{i2c}     & \et{r1}     & \ARROW & \et{r2}        & converte um inteiro para caractere \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

As primeiras duas operações, \et{i2i} e \et{c2c}, copiam um valor de
um registrador para outro, sem conversão. As duas últimas operações
realizam conversões considerando a codificação de caracteres ASCII.

** Operações de Fluxo de Controle

Em geral, operações de comparação na Linguagem ILOC recebem dois
valores e retornam um valor booleano.

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte} &        & {\bf Alvo}     & {\bf Significado} \\\toprule
\et{cmp\_LT} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 < r2$, senão $r3 = false$ \\
\et{cmp\_LE} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 \leq r2$, senão $r3 = false$ \\
\et{cmp\_EQ} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 = r2$, senão $r3 = false$ \\
\et{cmp\_GE} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 \geq r2$, senão $r3 = false$ \\
\et{cmp\_GT} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 > r2$, senão $r3 = false$ \\
\et{cmp\_NE} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 \neq r2$, senão $r3 = false$ \\\midrule
\et{cbr}     & \et{r1}     & \ARROWs & \et{l2, l3}    & $PC = l2$ se $r1 = true$, senão $PC = l3$ \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

A operação condicional \et{cbr} recebe um booleano como argumento e
transfere o controle para um de dois rótulos alvo. Os dois rótulos
alvo não precisam estar definidos previamente (pode-se saltar para um
código mais a frente do programa).

*** Saltos

A Linguagem ILOC tem duas formas de operações de salto. A primeira é
um salto incondicional e imediato que transfere o controle para um a
primeira instrução após um rótulo. A segunda recebe um registrador
como argumento. O conteúdo do registrador é interpretado como um
endereço de código, transferindo o controle incondicionalmente e
imediatamente para este endereço. \emph{Esta segunda forma deve ser
  evitada por ser ambígua.} Mais detalhes a respeito disto na
referência oficial~\cite{keith}.

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte} &        & {\bf Alvo}     & {\bf Significado} \\\toprule
\et{jumpI} &  & \ARROWs & \et{l1}        & $PC = l1$ \\
\et{jump}  &  & \ARROWs & \et{r1}        & $PC = r1$ \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

** Sumário de Operações ILOC
\label{iloc-tabelas}

*** Sumários de Operações ILOC Individuais

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte}  &        & {\bf Alvo} & {\bf Significado} \\\toprule
\et{nop}     &&&                                  & não faz nada   \\\midrule

\et{add}     & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 + r2$ \\
\et{sub}     & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 - r2$ \\
\et{mult}    & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 * r2$ \\
\et{div}     & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 / r2$ \\\midrule

\et{addI}    & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 + c2$ \\
\et{subI}    & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 - c2$ \\
\et{rsubI}   & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = c2 - r1$ \\
\et{multI}   & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 * c2$ \\
\et{divI}    & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 / c2$ \\
\et{rdivI}   & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = c2 / r1$ \\\midrule

\et{lshift}  & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 << r2$ \\
\et{lshiftI} & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 << c2$ \\
\et{rshift}  & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 >> r2$ \\
\et{rshiftI} & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 >> c2$ \\\midrule

\et{and}     & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 \land r2$ \\
\et{andI}    & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 \land c2$ \\
\et{or}      & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1 \lor r2$ \\
\et{orI}     & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1 \lor c2$ \\
\et{xor}      & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 = r1$ xor $r2$ \\
\et{xorI}     & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 = r1$ xor $c2$ \\\midrule

\et{loadI}    & \et{c1}      & \ARROW & \et{r2}    & $r2 = c1$ \\\bottomrule
\et{load}    & \et{r1}      & \ARROW & \et{r2}    & $r2 =$ \textsc{Memoria}($r1$) \\
\et{loadAI}  & \et{r1, c2}  & \ARROW & \et{r3}    & $r3 =$ \textsc{Memoria}($r1 + c2$) \\
\et{loadA0}  & \et{r1, r2}  & \ARROW & \et{r3}    & $r3 =$ \textsc{Memoria}($r1 + r2$) \\\midrule

\et{cload}   & \et{r1}     & \ARROW & \et{r2}     & caractere \et{load} \\
\et{cloadAI} & \et{r1, c2} & \ARROW & \et{r3}     & caractere \et{loadAI} \\
\et{cloadA0} & \et{r1, r2} & \ARROW & \et{r3}     & caractere \et{loadA0} \\\midrule

\et{store}    & \et{r1}     & \ARROW & \et{r2}        & \textsc{Memoria}($r2$) $= r1$ \\
\et{storeAI}  & \et{r1}     & \ARROW & \et{r2, c3}    & \textsc{Memoria}($r2 + c3$) $= r1$ \\
\et{storeA0}  & \et{r1}     & \ARROW & \et{r2, r3}    & \textsc{Memoria}($r2 + r3$) $= r1$\\\midrule

\et{cstore}   & \et{r1}     & \ARROW & \et{r2}        & caractere \et{store} \\
\et{cstoreAI} & \et{r1}     & \ARROW & \et{r2, c3}    & caractere \et{storeAI} \\
\et{cstoreA0} & \et{r1}     & \ARROW & \et{r2, r3}    & caractere \et{storeA0} \\\midrule

\et{i2i}     & \et{r1}     & \ARROW & \et{r2}        & $r2 = r1$ para inteiros \\
\et{c2c}     & \et{r1}     & \ARROW & \et{r2}        & $r2 = r1$ para caracteres \\
\et{c2i}     & \et{r1}     & \ARROW & \et{r2}        & converte um caractere para um inteiro\\
\et{i2c}     & \et{r1}     & \ARROW & \et{r2}        & converte um inteiro para caractere \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

*** Sumários de Operações ILOC de Fluxo de Controle

#+BEGIN_EXPORT latex
\begin{center}
\begin{tabular}{llll|l}\toprule
{\bf Opcode} & {\bf Fonte} &        & {\bf Alvo}     & {\bf Significado} \\\toprule
\et{jumpI} &  & \ARROWs & \et{l1}        & $PC = l1$ \\
\et{jump}  &  & \ARROWs & \et{r1}        & $PC = r1$ \\\midrule

\et{cbr}     & \et{r1}     & \ARROWs & \et{l2, l3}    & $PC = l2$ se $r1 = true$, senão $PC = l3$ \\\midrule

\et{cmp\_LT} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 < r2$, senão $r3 = false$ \\
\et{cmp\_LE} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 \leq r2$, senão $r3 = false$ \\
\et{cmp\_EQ} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 = r2$, senão $r3 = false$ \\
\et{cmp\_GE} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 \geq r2$, senão $r3 = false$ \\
\et{cmp\_GT} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 > r2$, senão $r3 = false$ \\
\et{cmp\_NE} & \et{r1, r2} & \ARROWs & \et{r3}        & $r3 = true$ se $r1 \neq r2$, senão $r3 = false$ \\\bottomrule
\end{tabular}
\end{center}
#+END_EXPORT

* Bib                                                              :noexport:
#+BEGIN_SRC bibtex :tangle biblio.bib
@book{keith,
author = {{Keith D. Cooper and Linda Torczon}},
title = {{Engineering a Compiler}},
publisher = {{Morgan Kaufmann}},
year = {{2012}},
edition = {{2nd}}
}
#+END_SRC
* 2016-06-25 Entrega                                               :noexport:

#+TBLNAME:etapa5tags
|----+----------+--------------+---+-----------------|
|----+----------+--------------+---+-----------------|

Call `org-table-export' command in the table, export to file =etapa5.csv=.

#+begin_src sh :results output :session :exports both
  FILE=etapa5.csv
  DIR=results/etapa5/
  mkdir -p $DIR
  rm -rf $DIR/*
  cp $FILE $DIR
  cd $DIR

  # prepare reference empty repository
  git clone XXX ref
 
  # loop over solutions
  while read -r line; do
     UNIQUE=`echo "$line" | cut -d, -f1`
     GITREF=`echo "$line" | cut -d, -f4`
     TAGREF=`echo "$line" | cut -d, -f5`

     if [ -z $TAGREF ]; then
        continue
     fi
     echo $UNIQUE $GITREF $TAGREF

     # clone the repository
     mkdir -p $UNIQUE; cd $UNIQUE
     git clone $GITREF .
     # let's customize it
     git checkout $TAGREF
     rm -rf `find | grep CMakeCache.txt`
     rm -rf `find | grep build`
     rm -rf tests/e[123456]/
     cd ..
     #copy my tests
     cp -prfv ref/tests/e5/ $UNIQUE/tests/

     # preparing the out-of-source build dir
     BUILDIR=b-$UNIQUE
     mkdir -p $BUILDIR
     cd $BUILDIR
     cmake -DETAPA_1=OFF -DETAPA_2=OFF -DETAPA_3=OFF -DETAPA_4=OFF -DETAPA_5=ON ../$UNIQUE/; make;
     cd ..
  done < $FILE
#+end_src

#+RESULTS:
#+begin_example
01 git@bitbucket.org:wbombardellis/grupo01-compil-2016-1.git etapa5
‘ref/tests/e5/’ -> ‘01/tests/e5’
‘ref/tests/e5/avaliacao_00_0.tesh’ -> ‘01/tests/e5/avaliacao_00_0.tesh’
‘ref/tests/e5/avaliacao_00_1.tesh’ -> ‘01/tests/e5/avaliacao_00_1.tesh’
‘ref/tests/e5/avaliacao_01_0.tesh’ -> ‘01/tests/e5/avaliacao_01_0.tesh’
‘ref/tests/e5/avaliacao_01_1.tesh’ -> ‘01/tests/e5/avaliacao_01_1.tesh’
‘ref/tests/e5/avaliacao_02_0.tesh’ -> ‘01/tests/e5/avaliacao_02_0.tesh’
‘ref/tests/e5/avaliacao_02_1.tesh’ -> ‘01/tests/e5/avaliacao_02_1.tesh’
‘ref/tests/e5/avaliacao_03_0.tesh’ -> ‘01/tests/e5/avaliacao_03_0.tesh’
‘ref/tests/e5/avaliacao_03_1.tesh’ -> ‘01/tests/e5/avaliacao_03_1.tesh’
‘ref/tests/e5/avaliacao_04_0.tesh’ -> ‘01/tests/e5/avaliacao_04_0.tesh’
‘ref/tests/e5/avaliacao_04_1.tesh’ -> ‘01/tests/e5/avaliacao_04_1.tesh’
‘ref/tests/e5/avaliacao_05_0.tesh’ -> ‘01/tests/e5/avaliacao_05_0.tesh’
‘ref/tests/e5/avaliacao_05_1.tesh’ -> ‘01/tests/e5/avaliacao_05_1.tesh’
‘ref/tests/e5/avaliacao_06_0.tesh’ -> ‘01/tests/e5/avaliacao_06_0.tesh’
‘ref/tests/e5/avaliacao_06_1.tesh’ -> ‘01/tests/e5/avaliacao_06_1.tesh’
‘ref/tests/e5/avaliacao_07_0.tesh’ -> ‘01/tests/e5/avaliacao_07_0.tesh’
‘ref/tests/e5/avaliacao_07_1.tesh’ -> ‘01/tests/e5/avaliacao_07_1.tesh’
‘ref/tests/e5/avaliacao_08_0.tesh’ -> ‘01/tests/e5/avaliacao_08_0.tesh’
‘ref/tests/e5/avaliacao_08_1.tesh’ -> ‘01/tests/e5/avaliacao_08_1.tesh’
‘ref/tests/e5/avaliacao_09_0.tesh’ -> ‘01/tests/e5/avaliacao_09_0.tesh’
‘ref/tests/e5/avaliacao_09_1.tesh’ -> ‘01/tests/e5/avaliacao_09_1.tesh’
‘ref/tests/e5/avaliacao_10_0.tesh’ -> ‘01/tests/e5/avaliacao_10_0.tesh’
‘ref/tests/e5/avaliacao_10_1.tesh’ -> ‘01/tests/e5/avaliacao_10_1.tesh’
‘ref/tests/e5/avaliacao_11_0.tesh’ -> ‘01/tests/e5/avaliacao_11_0.tesh’
‘ref/tests/e5/avaliacao_11_1.tesh’ -> ‘01/tests/e5/avaliacao_11_1.tesh’
‘ref/tests/e5/avaliacao_12_0.tesh’ -> ‘01/tests/e5/avaliacao_12_0.tesh’
‘ref/tests/e5/avaliacao_12_1.tesh’ -> ‘01/tests/e5/avaliacao_12_1.tesh’
‘ref/tests/e5/avaliacao_13_0.tesh’ -> ‘01/tests/e5/avaliacao_13_0.tesh’
‘ref/tests/e5/avaliacao_13_1.tesh’ -> ‘01/tests/e5/avaliacao_13_1.tesh’
‘ref/tests/e5/avaliacao_14_0.tesh’ -> ‘01/tests/e5/avaliacao_14_0.tesh’
‘ref/tests/e5/avaliacao_14_1.tesh’ -> ‘01/tests/e5/avaliacao_14_1.tesh’
‘ref/tests/e5/avaliacao_15_0.tesh’ -> ‘01/tests/e5/avaliacao_15_0.tesh’
‘ref/tests/e5/avaliacao_15_1.tesh’ -> ‘01/tests/e5/avaliacao_15_1.tesh’
‘ref/tests/e5/avaliacao_16_0.tesh’ -> ‘01/tests/e5/avaliacao_16_0.tesh’
‘ref/tests/e5/avaliacao_16_1.tesh’ -> ‘01/tests/e5/avaliacao_16_1.tesh’
‘ref/tests/e5/avaliacao_17_0.tesh’ -> ‘01/tests/e5/avaliacao_17_0.tesh’
‘ref/tests/e5/avaliacao_17_1.tesh’ -> ‘01/tests/e5/avaliacao_17_1.tesh’
‘ref/tests/e5/avaliacao_18_0.tesh’ -> ‘01/tests/e5/avaliacao_18_0.tesh’
‘ref/tests/e5/avaliacao_18_1.tesh’ -> ‘01/tests/e5/avaliacao_18_1.tesh’
‘ref/tests/e5/execute.sh’ -> ‘01/tests/e5/execute.sh’
‘ref/tests/e5/valgrind_00_0.tesh’ -> ‘01/tests/e5/valgrind_00_0.tesh’
‘ref/tests/e5/valgrind_00_1.tesh’ -> ‘01/tests/e5/valgrind_00_1.tesh’
‘ref/tests/e5/valgrind_01_0.tesh’ -> ‘01/tests/e5/valgrind_01_0.tesh’
‘ref/tests/e5/valgrind_01_1.tesh’ -> ‘01/tests/e5/valgrind_01_1.tesh’
‘ref/tests/e5/valgrind_02_0.tesh’ -> ‘01/tests/e5/valgrind_02_0.tesh’
‘ref/tests/e5/valgrind_02_1.tesh’ -> ‘01/tests/e5/valgrind_02_1.tesh’
‘ref/tests/e5/valgrind_03_0.tesh’ -> ‘01/tests/e5/valgrind_03_0.tesh’
‘ref/tests/e5/valgrind_03_1.tesh’ -> ‘01/tests/e5/valgrind_03_1.tesh’
‘ref/tests/e5/valgrind_04_0.tesh’ -> ‘01/tests/e5/valgrind_04_0.tesh’
‘ref/tests/e5/valgrind_04_1.tesh’ -> ‘01/tests/e5/valgrind_04_1.tesh’
‘ref/tests/e5/valgrind_05_0.tesh’ -> ‘01/tests/e5/valgrind_05_0.tesh’
‘ref/tests/e5/valgrind_05_1.tesh’ -> ‘01/tests/e5/valgrind_05_1.tesh’
‘ref/tests/e5/valgrind_06_0.tesh’ -> ‘01/tests/e5/valgrind_06_0.tesh’
‘ref/tests/e5/valgrind_06_1.tesh’ -> ‘01/tests/e5/valgrind_06_1.tesh’
‘ref/tests/e5/valgrind_07_0.tesh’ -> ‘01/tests/e5/valgrind_07_0.tesh’
‘ref/tests/e5/valgrind_07_1.tesh’ -> ‘01/tests/e5/valgrind_07_1.tesh’
‘ref/tests/e5/valgrind_08_0.tesh’ -> ‘01/tests/e5/valgrind_08_0.tesh’
‘ref/tests/e5/valgrind_08_1.tesh’ -> ‘01/tests/e5/valgrind_08_1.tesh’
‘ref/tests/e5/valgrind_09_0.tesh’ -> ‘01/tests/e5/valgrind_09_0.tesh’
‘ref/tests/e5/valgrind_09_1.tesh’ -> ‘01/tests/e5/valgrind_09_1.tesh’
‘ref/tests/e5/valgrind_10_0.tesh’ -> ‘01/tests/e5/valgrind_10_0.tesh’
‘ref/tests/e5/valgrind_10_1.tesh’ -> ‘01/tests/e5/valgrind_10_1.tesh’
‘ref/tests/e5/valgrind_11_0.tesh’ -> ‘01/tests/e5/valgrind_11_0.tesh’
‘ref/tests/e5/valgrind_11_1.tesh’ -> ‘01/tests/e5/valgrind_11_1.tesh’
‘ref/tests/e5/valgrind_12_0.tesh’ -> ‘01/tests/e5/valgrind_12_0.tesh’
‘ref/tests/e5/valgrind_12_1.tesh’ -> ‘01/tests/e5/valgrind_12_1.tesh’
‘ref/tests/e5/valgrind_13_0.tesh’ -> ‘01/tests/e5/valgrind_13_0.tesh’
‘ref/tests/e5/valgrind_13_1.tesh’ -> ‘01/tests/e5/valgrind_13_1.tesh’
‘ref/tests/e5/valgrind_14_0.tesh’ -> ‘01/tests/e5/valgrind_14_0.tesh’
‘ref/tests/e5/valgrind_14_1.tesh’ -> ‘01/tests/e5/valgrind_14_1.tesh’
‘ref/tests/e5/valgrind_15_0.tesh’ -> ‘01/tests/e5/valgrind_15_0.tesh’
‘ref/tests/e5/valgrind_15_1.tesh’ -> ‘01/tests/e5/valgrind_15_1.tesh’
‘ref/tests/e5/valgrind_16_0.tesh’ -> ‘01/tests/e5/valgrind_16_0.tesh’
‘ref/tests/e5/valgrind_16_1.tesh’ -> ‘01/tests/e5/valgrind_16_1.tesh’
‘ref/tests/e5/valgrind_17_0.tesh’ -> ‘01/tests/e5/valgrind_17_0.tesh’
‘ref/tests/e5/valgrind_17_1.tesh’ -> ‘01/tests/e5/valgrind_17_1.tesh’
‘ref/tests/e5/valgrind_18_0.tesh’ -> ‘01/tests/e5/valgrind_18_0.tesh’
‘ref/tests/e5/valgrind_18_1.tesh’ -> ‘01/tests/e5/valgrind_18_1.tesh’
‘ref/tests/e5/verify’ -> ‘01/tests/e5/verify’
‘ref/tests/e5/verify-new’ -> ‘01/tests/e5/verify-new’
‘ref/tests/e5/expected’ -> ‘01/tests/e5/expected’
‘ref/tests/e5/expected/00.out’ -> ‘01/tests/e5/expected/00.out’
‘ref/tests/e5/expected/01.out’ -> ‘01/tests/e5/expected/01.out’
‘ref/tests/e5/expected/02.out’ -> ‘01/tests/e5/expected/02.out’
‘ref/tests/e5/expected/03.out’ -> ‘01/tests/e5/expected/03.out’
‘ref/tests/e5/expected/04.out’ -> ‘01/tests/e5/expected/04.out’
‘ref/tests/e5/expected/05.out’ -> ‘01/tests/e5/expected/05.out’
‘ref/tests/e5/expected/06.out’ -> ‘01/tests/e5/expected/06.out’
‘ref/tests/e5/expected/07.out’ -> ‘01/tests/e5/expected/07.out’
‘ref/tests/e5/expected/08.out’ -> ‘01/tests/e5/expected/08.out’
‘ref/tests/e5/input’ -> ‘01/tests/e5/input’
‘ref/tests/e5/input/e00_0.amarela’ -> ‘01/tests/e5/input/e00_0.amarela’
‘ref/tests/e5/input/e00_1.amarela’ -> ‘01/tests/e5/input/e00_1.amarela’
‘ref/tests/e5/input/e01_0.amarela’ -> ‘01/tests/e5/input/e01_0.amarela’
‘ref/tests/e5/input/e01_1.amarela’ -> ‘01/tests/e5/input/e01_1.amarela’
‘ref/tests/e5/input/e02_0.amarela’ -> ‘01/tests/e5/input/e02_0.amarela’
‘ref/tests/e5/input/e02_1.amarela’ -> ‘01/tests/e5/input/e02_1.amarela’
‘ref/tests/e5/input/e03_0.amarela’ -> ‘01/tests/e5/input/e03_0.amarela’
‘ref/tests/e5/input/e03_1.amarela’ -> ‘01/tests/e5/input/e03_1.amarela’
‘ref/tests/e5/input/e04_0.amarela’ -> ‘01/tests/e5/input/e04_0.amarela’
‘ref/tests/e5/input/e04_1.amarela’ -> ‘01/tests/e5/input/e04_1.amarela’
‘ref/tests/e5/input/e05_0.amarela’ -> ‘01/tests/e5/input/e05_0.amarela’
‘ref/tests/e5/input/e05_1.amarela’ -> ‘01/tests/e5/input/e05_1.amarela’
‘ref/tests/e5/input/e06_0.amarela’ -> ‘01/tests/e5/input/e06_0.amarela’
‘ref/tests/e5/input/e06_1.amarela’ -> ‘01/tests/e5/input/e06_1.amarela’
‘ref/tests/e5/input/e07_0.amarela’ -> ‘01/tests/e5/input/e07_0.amarela’
‘ref/tests/e5/input/e07_1.amarela’ -> ‘01/tests/e5/input/e07_1.amarela’
‘ref/tests/e5/input/e08_0.amarela’ -> ‘01/tests/e5/input/e08_0.amarela’
‘ref/tests/e5/input/e08_1.amarela’ -> ‘01/tests/e5/input/e08_1.amarela’
‘ref/tests/e5/input/e09_0.amarela’ -> ‘01/tests/e5/input/e09_0.amarela’
‘ref/tests/e5/input/e09_1.amarela’ -> ‘01/tests/e5/input/e09_1.amarela’
‘ref/tests/e5/input/e10_0.amarela’ -> ‘01/tests/e5/input/e10_0.amarela’
‘ref/tests/e5/input/e10_1.amarela’ -> ‘01/tests/e5/input/e10_1.amarela’
‘ref/tests/e5/input/e11_0.amarela’ -> ‘01/tests/e5/input/e11_0.amarela’
‘ref/tests/e5/input/e11_1.amarela’ -> ‘01/tests/e5/input/e11_1.amarela’
‘ref/tests/e5/input/e12_0.amarela’ -> ‘01/tests/e5/input/e12_0.amarela’
‘ref/tests/e5/input/e12_1.amarela’ -> ‘01/tests/e5/input/e12_1.amarela’
‘ref/tests/e5/input/e13_0.amarela’ -> ‘01/tests/e5/input/e13_0.amarela’
‘ref/tests/e5/input/e13_1.amarela’ -> ‘01/tests/e5/input/e13_1.amarela’
‘ref/tests/e5/input/e14_0.amarela’ -> ‘01/tests/e5/input/e14_0.amarela’
‘ref/tests/e5/input/e14_1.amarela’ -> ‘01/tests/e5/input/e14_1.amarela’
‘ref/tests/e5/input/e15_0.amarela’ -> ‘01/tests/e5/input/e15_0.amarela’
‘ref/tests/e5/input/e15_1.amarela’ -> ‘01/tests/e5/input/e15_1.amarela’
‘ref/tests/e5/input/e16_0.amarela’ -> ‘01/tests/e5/input/e16_0.amarela’
‘ref/tests/e5/input/e16_1.amarela’ -> ‘01/tests/e5/input/e16_1.amarela’
‘ref/tests/e5/input/e17_0.amarela’ -> ‘01/tests/e5/input/e17_0.amarela’
‘ref/tests/e5/input/e17_1.amarela’ -> ‘01/tests/e5/input/e17_1.amarela’
‘ref/tests/e5/input/e18_0.amarela’ -> ‘01/tests/e5/input/e18_0.amarela’
‘ref/tests/e5/input/e18_1.amarela’ -> ‘01/tests/e5/input/e18_1.amarela’
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found FLEX: /usr/bin/flex (found version "2.5.39") 
-- Found BISON: /usr/bin/bison (found version "3.0.2") 
-- Setting build type to 'Debug' as none was specified.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/schnorr/ensino/inf01147-compiladores/projeto/results/etapa5/b-01
[  6%] [BISON][parser] Building parser with bison 3.0.2
[ 13%] [FLEX][scanner] Building scanner with flex 2.5.39
Scanning dependencies of target main
[ 20%] Building C object CMakeFiles/main.dir/scanner.c.o
[ 26%] Building C object CMakeFiles/main.dir/parser.c.o
[ 33%] Building C object CMakeFiles/main.dir/src/main.c.o
[ 40%] Building C object CMakeFiles/main.dir/src/cc_misc.c.o
[ 46%] Building C object CMakeFiles/main.dir/src/cc_gv.c.o
[ 53%] Building C object CMakeFiles/main.dir/src/cc_dict.c.o
[ 60%] Building C object CMakeFiles/main.dir/src/cc_list.c.o
[ 66%] Building C object CMakeFiles/main.dir/src/cc_tree.c.o
[ 73%] Building C object CMakeFiles/main.dir/src/cc_ast.c.o
[ 80%] Building C object CMakeFiles/main.dir/src/cc_stack.c.o
[ 86%] Building C object CMakeFiles/main.dir/src/cc_SymbolTable.c.o
[ 93%] Building C object CMakeFiles/main.dir/src/cc_SemanticType.c.o
[100%] Building C object CMakeFiles/main.dir/src/cc_iloc.c.o
Linking C executable main
[100%] Built target main
02 git@bitbucket.org:mateusriad/compil-2016-1.git ETAPA5_2
‘ref/tests/e5/’ -> ‘02/tests/e5’
‘ref/tests/e5/avaliacao_00_0.tesh’ -> ‘02/tests/e5/avaliacao_00_0.tesh’
‘ref/tests/e5/avaliacao_00_1.tesh’ -> ‘02/tests/e5/avaliacao_00_1.tesh’
‘ref/tests/e5/avaliacao_01_0.tesh’ -> ‘02/tests/e5/avaliacao_01_0.tesh’
‘ref/tests/e5/avaliacao_01_1.tesh’ -> ‘02/tests/e5/avaliacao_01_1.tesh’
‘ref/tests/e5/avaliacao_02_0.tesh’ -> ‘02/tests/e5/avaliacao_02_0.tesh’
‘ref/tests/e5/avaliacao_02_1.tesh’ -> ‘02/tests/e5/avaliacao_02_1.tesh’
‘ref/tests/e5/avaliacao_03_0.tesh’ -> ‘02/tests/e5/avaliacao_03_0.tesh’
‘ref/tests/e5/avaliacao_03_1.tesh’ -> ‘02/tests/e5/avaliacao_03_1.tesh’
‘ref/tests/e5/avaliacao_04_0.tesh’ -> ‘02/tests/e5/avaliacao_04_0.tesh’
‘ref/tests/e5/avaliacao_04_1.tesh’ -> ‘02/tests/e5/avaliacao_04_1.tesh’
‘ref/tests/e5/avaliacao_05_0.tesh’ -> ‘02/tests/e5/avaliacao_05_0.tesh’
‘ref/tests/e5/avaliacao_05_1.tesh’ -> ‘02/tests/e5/avaliacao_05_1.tesh’
‘ref/tests/e5/avaliacao_06_0.tesh’ -> ‘02/tests/e5/avaliacao_06_0.tesh’
‘ref/tests/e5/avaliacao_06_1.tesh’ -> ‘02/tests/e5/avaliacao_06_1.tesh’
‘ref/tests/e5/avaliacao_07_0.tesh’ -> ‘02/tests/e5/avaliacao_07_0.tesh’
‘ref/tests/e5/avaliacao_07_1.tesh’ -> ‘02/tests/e5/avaliacao_07_1.tesh’
‘ref/tests/e5/avaliacao_08_0.tesh’ -> ‘02/tests/e5/avaliacao_08_0.tesh’
‘ref/tests/e5/avaliacao_08_1.tesh’ -> ‘02/tests/e5/avaliacao_08_1.tesh’
‘ref/tests/e5/avaliacao_09_0.tesh’ -> ‘02/tests/e5/avaliacao_09_0.tesh’
‘ref/tests/e5/avaliacao_09_1.tesh’ -> ‘02/tests/e5/avaliacao_09_1.tesh’
‘ref/tests/e5/avaliacao_10_0.tesh’ -> ‘02/tests/e5/avaliacao_10_0.tesh’
‘ref/tests/e5/avaliacao_10_1.tesh’ -> ‘02/tests/e5/avaliacao_10_1.tesh’
‘ref/tests/e5/avaliacao_11_0.tesh’ -> ‘02/tests/e5/avaliacao_11_0.tesh’
‘ref/tests/e5/avaliacao_11_1.tesh’ -> ‘02/tests/e5/avaliacao_11_1.tesh’
‘ref/tests/e5/avaliacao_12_0.tesh’ -> ‘02/tests/e5/avaliacao_12_0.tesh’
‘ref/tests/e5/avaliacao_12_1.tesh’ -> ‘02/tests/e5/avaliacao_12_1.tesh’
‘ref/tests/e5/avaliacao_13_0.tesh’ -> ‘02/tests/e5/avaliacao_13_0.tesh’
‘ref/tests/e5/avaliacao_13_1.tesh’ -> ‘02/tests/e5/avaliacao_13_1.tesh’
‘ref/tests/e5/avaliacao_14_0.tesh’ -> ‘02/tests/e5/avaliacao_14_0.tesh’
‘ref/tests/e5/avaliacao_14_1.tesh’ -> ‘02/tests/e5/avaliacao_14_1.tesh’
‘ref/tests/e5/avaliacao_15_0.tesh’ -> ‘02/tests/e5/avaliacao_15_0.tesh’
‘ref/tests/e5/avaliacao_15_1.tesh’ -> ‘02/tests/e5/avaliacao_15_1.tesh’
‘ref/tests/e5/avaliacao_16_0.tesh’ -> ‘02/tests/e5/avaliacao_16_0.tesh’
‘ref/tests/e5/avaliacao_16_1.tesh’ -> ‘02/tests/e5/avaliacao_16_1.tesh’
‘ref/tests/e5/avaliacao_17_0.tesh’ -> ‘02/tests/e5/avaliacao_17_0.tesh’
‘ref/tests/e5/avaliacao_17_1.tesh’ -> ‘02/tests/e5/avaliacao_17_1.tesh’
‘ref/tests/e5/avaliacao_18_0.tesh’ -> ‘02/tests/e5/avaliacao_18_0.tesh’
‘ref/tests/e5/avaliacao_18_1.tesh’ -> ‘02/tests/e5/avaliacao_18_1.tesh’
‘ref/tests/e5/execute.sh’ -> ‘02/tests/e5/execute.sh’
‘ref/tests/e5/valgrind_00_0.tesh’ -> ‘02/tests/e5/valgrind_00_0.tesh’
‘ref/tests/e5/valgrind_00_1.tesh’ -> ‘02/tests/e5/valgrind_00_1.tesh’
‘ref/tests/e5/valgrind_01_0.tesh’ -> ‘02/tests/e5/valgrind_01_0.tesh’
‘ref/tests/e5/valgrind_01_1.tesh’ -> ‘02/tests/e5/valgrind_01_1.tesh’
‘ref/tests/e5/valgrind_02_0.tesh’ -> ‘02/tests/e5/valgrind_02_0.tesh’
‘ref/tests/e5/valgrind_02_1.tesh’ -> ‘02/tests/e5/valgrind_02_1.tesh’
‘ref/tests/e5/valgrind_03_0.tesh’ -> ‘02/tests/e5/valgrind_03_0.tesh’
‘ref/tests/e5/valgrind_03_1.tesh’ -> ‘02/tests/e5/valgrind_03_1.tesh’
‘ref/tests/e5/valgrind_04_0.tesh’ -> ‘02/tests/e5/valgrind_04_0.tesh’
‘ref/tests/e5/valgrind_04_1.tesh’ -> ‘02/tests/e5/valgrind_04_1.tesh’
‘ref/tests/e5/valgrind_05_0.tesh’ -> ‘02/tests/e5/valgrind_05_0.tesh’
‘ref/tests/e5/valgrind_05_1.tesh’ -> ‘02/tests/e5/valgrind_05_1.tesh’
‘ref/tests/e5/valgrind_06_0.tesh’ -> ‘02/tests/e5/valgrind_06_0.tesh’
‘ref/tests/e5/valgrind_06_1.tesh’ -> ‘02/tests/e5/valgrind_06_1.tesh’
‘ref/tests/e5/valgrind_07_0.tesh’ -> ‘02/tests/e5/valgrind_07_0.tesh’
‘ref/tests/e5/valgrind_07_1.tesh’ -> ‘02/tests/e5/valgrind_07_1.tesh’
‘ref/tests/e5/valgrind_08_0.tesh’ -> ‘02/tests/e5/valgrind_08_0.tesh’
‘ref/tests/e5/valgrind_08_1.tesh’ -> ‘02/tests/e5/valgrind_08_1.tesh’
‘ref/tests/e5/valgrind_09_0.tesh’ -> ‘02/tests/e5/valgrind_09_0.tesh’
‘ref/tests/e5/valgrind_09_1.tesh’ -> ‘02/tests/e5/valgrind_09_1.tesh’
‘ref/tests/e5/valgrind_10_0.tesh’ -> ‘02/tests/e5/valgrind_10_0.tesh’
‘ref/tests/e5/valgrind_10_1.tesh’ -> ‘02/tests/e5/valgrind_10_1.tesh’
‘ref/tests/e5/valgrind_11_0.tesh’ -> ‘02/tests/e5/valgrind_11_0.tesh’
‘ref/tests/e5/valgrind_11_1.tesh’ -> ‘02/tests/e5/valgrind_11_1.tesh’
‘ref/tests/e5/valgrind_12_0.tesh’ -> ‘02/tests/e5/valgrind_12_0.tesh’
‘ref/tests/e5/valgrind_12_1.tesh’ -> ‘02/tests/e5/valgrind_12_1.tesh’
‘ref/tests/e5/valgrind_13_0.tesh’ -> ‘02/tests/e5/valgrind_13_0.tesh’
‘ref/tests/e5/valgrind_13_1.tesh’ -> ‘02/tests/e5/valgrind_13_1.tesh’
‘ref/tests/e5/valgrind_14_0.tesh’ -> ‘02/tests/e5/valgrind_14_0.tesh’
‘ref/tests/e5/valgrind_14_1.tesh’ -> ‘02/tests/e5/valgrind_14_1.tesh’
‘ref/tests/e5/valgrind_15_0.tesh’ -> ‘02/tests/e5/valgrind_15_0.tesh’
‘ref/tests/e5/valgrind_15_1.tesh’ -> ‘02/tests/e5/valgrind_15_1.tesh’
‘ref/tests/e5/valgrind_16_0.tesh’ -> ‘02/tests/e5/valgrind_16_0.tesh’
‘ref/tests/e5/valgrind_16_1.tesh’ -> ‘02/tests/e5/valgrind_16_1.tesh’
‘ref/tests/e5/valgrind_17_0.tesh’ -> ‘02/tests/e5/valgrind_17_0.tesh’
‘ref/tests/e5/valgrind_17_1.tesh’ -> ‘02/tests/e5/valgrind_17_1.tesh’
‘ref/tests/e5/valgrind_18_0.tesh’ -> ‘02/tests/e5/valgrind_18_0.tesh’
‘ref/tests/e5/valgrind_18_1.tesh’ -> ‘02/tests/e5/valgrind_18_1.tesh’
‘ref/tests/e5/verify’ -> ‘02/tests/e5/verify’
‘ref/tests/e5/verify-new’ -> ‘02/tests/e5/verify-new’
‘ref/tests/e5/expected’ -> ‘02/tests/e5/expected’
‘ref/tests/e5/expected/00.out’ -> ‘02/tests/e5/expected/00.out’
‘ref/tests/e5/expected/01.out’ -> ‘02/tests/e5/expected/01.out’
‘ref/tests/e5/expected/02.out’ -> ‘02/tests/e5/expected/02.out’
‘ref/tests/e5/expected/03.out’ -> ‘02/tests/e5/expected/03.out’
‘ref/tests/e5/expected/04.out’ -> ‘02/tests/e5/expected/04.out’
‘ref/tests/e5/expected/05.out’ -> ‘02/tests/e5/expected/05.out’
‘ref/tests/e5/expected/06.out’ -> ‘02/tests/e5/expected/06.out’
‘ref/tests/e5/expected/07.out’ -> ‘02/tests/e5/expected/07.out’
‘ref/tests/e5/expected/08.out’ -> ‘02/tests/e5/expected/08.out’
‘ref/tests/e5/input’ -> ‘02/tests/e5/input’
‘ref/tests/e5/input/e00_0.amarela’ -> ‘02/tests/e5/input/e00_0.amarela’
‘ref/tests/e5/input/e00_1.amarela’ -> ‘02/tests/e5/input/e00_1.amarela’
‘ref/tests/e5/input/e01_0.amarela’ -> ‘02/tests/e5/input/e01_0.amarela’
‘ref/tests/e5/input/e01_1.amarela’ -> ‘02/tests/e5/input/e01_1.amarela’
‘ref/tests/e5/input/e02_0.amarela’ -> ‘02/tests/e5/input/e02_0.amarela’
‘ref/tests/e5/input/e02_1.amarela’ -> ‘02/tests/e5/input/e02_1.amarela’
‘ref/tests/e5/input/e03_0.amarela’ -> ‘02/tests/e5/input/e03_0.amarela’
‘ref/tests/e5/input/e03_1.amarela’ -> ‘02/tests/e5/input/e03_1.amarela’
‘ref/tests/e5/input/e04_0.amarela’ -> ‘02/tests/e5/input/e04_0.amarela’
‘ref/tests/e5/input/e04_1.amarela’ -> ‘02/tests/e5/input/e04_1.amarela’
‘ref/tests/e5/input/e05_0.amarela’ -> ‘02/tests/e5/input/e05_0.amarela’
‘ref/tests/e5/input/e05_1.amarela’ -> ‘02/tests/e5/input/e05_1.amarela’
‘ref/tests/e5/input/e06_0.amarela’ -> ‘02/tests/e5/input/e06_0.amarela’
‘ref/tests/e5/input/e06_1.amarela’ -> ‘02/tests/e5/input/e06_1.amarela’
‘ref/tests/e5/input/e07_0.amarela’ -> ‘02/tests/e5/input/e07_0.amarela’
‘ref/tests/e5/input/e07_1.amarela’ -> ‘02/tests/e5/input/e07_1.amarela’
‘ref/tests/e5/input/e08_0.amarela’ -> ‘02/tests/e5/input/e08_0.amarela’
‘ref/tests/e5/input/e08_1.amarela’ -> ‘02/tests/e5/input/e08_1.amarela’
‘ref/tests/e5/input/e09_0.amarela’ -> ‘02/tests/e5/input/e09_0.amarela’
‘ref/tests/e5/input/e09_1.amarela’ -> ‘02/tests/e5/input/e09_1.amarela’
‘ref/tests/e5/input/e10_0.amarela’ -> ‘02/tests/e5/input/e10_0.amarela’
‘ref/tests/e5/input/e10_1.amarela’ -> ‘02/tests/e5/input/e10_1.amarela’
‘ref/tests/e5/input/e11_0.amarela’ -> ‘02/tests/e5/input/e11_0.amarela’
‘ref/tests/e5/input/e11_1.amarela’ -> ‘02/tests/e5/input/e11_1.amarela’
‘ref/tests/e5/input/e12_0.amarela’ -> ‘02/tests/e5/input/e12_0.amarela’
‘ref/tests/e5/input/e12_1.amarela’ -> ‘02/tests/e5/input/e12_1.amarela’
‘ref/tests/e5/input/e13_0.amarela’ -> ‘02/tests/e5/input/e13_0.amarela’
‘ref/tests/e5/input/e13_1.amarela’ -> ‘02/tests/e5/input/e13_1.amarela’
‘ref/tests/e5/input/e14_0.amarela’ -> ‘02/tests/e5/input/e14_0.amarela’
‘ref/tests/e5/input/e14_1.amarela’ -> ‘02/tests/e5/input/e14_1.amarela’
‘ref/tests/e5/input/e15_0.amarela’ -> ‘02/tests/e5/input/e15_0.amarela’
‘ref/tests/e5/input/e15_1.amarela’ -> ‘02/tests/e5/input/e15_1.amarela’
‘ref/tests/e5/input/e16_0.amarela’ -> ‘02/tests/e5/input/e16_0.amarela’
‘ref/tests/e5/input/e16_1.amarela’ -> ‘02/tests/e5/input/e16_1.amarela’
‘ref/tests/e5/input/e17_0.amarela’ -> ‘02/tests/e5/input/e17_0.amarela’
‘ref/tests/e5/input/e17_1.amarela’ -> ‘02/tests/e5/input/e17_1.amarela’
‘ref/tests/e5/input/e18_0.amarela’ -> ‘02/tests/e5/input/e18_0.amarela’
‘ref/tests/e5/input/e18_1.amarela’ -> ‘02/tests/e5/input/e18_1.amarela’
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found FLEX: /usr/bin/flex (found version "2.5.39") 
-- Found BISON: /usr/bin/bison (found version "3.0.2") 
-- Setting build type to 'Debug' as none was specified.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/schnorr/ensino/inf01147-compiladores/projeto/results/etapa5/b-02
Scanning dependencies of target cc_dict_main_example
[  7%] Building C object CMakeFiles/cc_dict_main_example.dir/src/cc_dict.c.o
[ 14%] Building C object CMakeFiles/cc_dict_main_example.dir/src/cc_dict_main_example.c.o
Linking C executable cc_dict_main_example
[ 14%] Built target cc_dict_main_example
[ 21%] [BISON][parser] Building parser with bison 3.0.2
[ 28%] [FLEX][scanner] Building scanner with flex 2.5.39
Scanning dependencies of target main
[ 35%] Building C object CMakeFiles/main.dir/scanner.c.o
[ 42%] Building C object CMakeFiles/main.dir/parser.c.o
[ 50%] Building C object CMakeFiles/main.dir/src/main.c.o
[ 57%] Building C object CMakeFiles/main.dir/src/cc_misc.c.o
[ 64%] Building C object CMakeFiles/main.dir/src/cc_gv.c.o
[ 71%] Building C object CMakeFiles/main.dir/src/cc_dict.c.o
[ 78%] Building C object CMakeFiles/main.dir/src/cc_list.c.o
[ 85%] Building C object CMakeFiles/main.dir/src/cc_tree.c.o
[ 92%] Building C object CMakeFiles/main.dir/src/cc_stack.c.o
[100%] Building C object CMakeFiles/main.dir/src/cc_code.c.o
Linking C executable main
[100%] Built target main
03 git@bitbucket.org:MT_hs/tres.git Entrega_Etapa_5
‘ref/tests/e5/’ -> ‘03/tests/e5’
‘ref/tests/e5/avaliacao_00_0.tesh’ -> ‘03/tests/e5/avaliacao_00_0.tesh’
‘ref/tests/e5/avaliacao_00_1.tesh’ -> ‘03/tests/e5/avaliacao_00_1.tesh’
‘ref/tests/e5/avaliacao_01_0.tesh’ -> ‘03/tests/e5/avaliacao_01_0.tesh’
‘ref/tests/e5/avaliacao_01_1.tesh’ -> ‘03/tests/e5/avaliacao_01_1.tesh’
‘ref/tests/e5/avaliacao_02_0.tesh’ -> ‘03/tests/e5/avaliacao_02_0.tesh’
‘ref/tests/e5/avaliacao_02_1.tesh’ -> ‘03/tests/e5/avaliacao_02_1.tesh’
‘ref/tests/e5/avaliacao_03_0.tesh’ -> ‘03/tests/e5/avaliacao_03_0.tesh’
‘ref/tests/e5/avaliacao_03_1.tesh’ -> ‘03/tests/e5/avaliacao_03_1.tesh’
‘ref/tests/e5/avaliacao_04_0.tesh’ -> ‘03/tests/e5/avaliacao_04_0.tesh’
‘ref/tests/e5/avaliacao_04_1.tesh’ -> ‘03/tests/e5/avaliacao_04_1.tesh’
‘ref/tests/e5/avaliacao_05_0.tesh’ -> ‘03/tests/e5/avaliacao_05_0.tesh’
‘ref/tests/e5/avaliacao_05_1.tesh’ -> ‘03/tests/e5/avaliacao_05_1.tesh’
‘ref/tests/e5/avaliacao_06_0.tesh’ -> ‘03/tests/e5/avaliacao_06_0.tesh’
‘ref/tests/e5/avaliacao_06_1.tesh’ -> ‘03/tests/e5/avaliacao_06_1.tesh’
‘ref/tests/e5/avaliacao_07_0.tesh’ -> ‘03/tests/e5/avaliacao_07_0.tesh’
‘ref/tests/e5/avaliacao_07_1.tesh’ -> ‘03/tests/e5/avaliacao_07_1.tesh’
‘ref/tests/e5/avaliacao_08_0.tesh’ -> ‘03/tests/e5/avaliacao_08_0.tesh’
‘ref/tests/e5/avaliacao_08_1.tesh’ -> ‘03/tests/e5/avaliacao_08_1.tesh’
‘ref/tests/e5/avaliacao_09_0.tesh’ -> ‘03/tests/e5/avaliacao_09_0.tesh’
‘ref/tests/e5/avaliacao_09_1.tesh’ -> ‘03/tests/e5/avaliacao_09_1.tesh’
‘ref/tests/e5/avaliacao_10_0.tesh’ -> ‘03/tests/e5/avaliacao_10_0.tesh’
‘ref/tests/e5/avaliacao_10_1.tesh’ -> ‘03/tests/e5/avaliacao_10_1.tesh’
‘ref/tests/e5/avaliacao_11_0.tesh’ -> ‘03/tests/e5/avaliacao_11_0.tesh’
‘ref/tests/e5/avaliacao_11_1.tesh’ -> ‘03/tests/e5/avaliacao_11_1.tesh’
‘ref/tests/e5/avaliacao_12_0.tesh’ -> ‘03/tests/e5/avaliacao_12_0.tesh’
‘ref/tests/e5/avaliacao_12_1.tesh’ -> ‘03/tests/e5/avaliacao_12_1.tesh’
‘ref/tests/e5/avaliacao_13_0.tesh’ -> ‘03/tests/e5/avaliacao_13_0.tesh’
‘ref/tests/e5/avaliacao_13_1.tesh’ -> ‘03/tests/e5/avaliacao_13_1.tesh’
‘ref/tests/e5/avaliacao_14_0.tesh’ -> ‘03/tests/e5/avaliacao_14_0.tesh’
‘ref/tests/e5/avaliacao_14_1.tesh’ -> ‘03/tests/e5/avaliacao_14_1.tesh’
‘ref/tests/e5/avaliacao_15_0.tesh’ -> ‘03/tests/e5/avaliacao_15_0.tesh’
‘ref/tests/e5/avaliacao_15_1.tesh’ -> ‘03/tests/e5/avaliacao_15_1.tesh’
‘ref/tests/e5/avaliacao_16_0.tesh’ -> ‘03/tests/e5/avaliacao_16_0.tesh’
‘ref/tests/e5/avaliacao_16_1.tesh’ -> ‘03/tests/e5/avaliacao_16_1.tesh’
‘ref/tests/e5/avaliacao_17_0.tesh’ -> ‘03/tests/e5/avaliacao_17_0.tesh’
‘ref/tests/e5/avaliacao_17_1.tesh’ -> ‘03/tests/e5/avaliacao_17_1.tesh’
‘ref/tests/e5/avaliacao_18_0.tesh’ -> ‘03/tests/e5/avaliacao_18_0.tesh’
‘ref/tests/e5/avaliacao_18_1.tesh’ -> ‘03/tests/e5/avaliacao_18_1.tesh’
‘ref/tests/e5/execute.sh’ -> ‘03/tests/e5/execute.sh’
‘ref/tests/e5/valgrind_00_0.tesh’ -> ‘03/tests/e5/valgrind_00_0.tesh’
‘ref/tests/e5/valgrind_00_1.tesh’ -> ‘03/tests/e5/valgrind_00_1.tesh’
‘ref/tests/e5/valgrind_01_0.tesh’ -> ‘03/tests/e5/valgrind_01_0.tesh’
‘ref/tests/e5/valgrind_01_1.tesh’ -> ‘03/tests/e5/valgrind_01_1.tesh’
‘ref/tests/e5/valgrind_02_0.tesh’ -> ‘03/tests/e5/valgrind_02_0.tesh’
‘ref/tests/e5/valgrind_02_1.tesh’ -> ‘03/tests/e5/valgrind_02_1.tesh’
‘ref/tests/e5/valgrind_03_0.tesh’ -> ‘03/tests/e5/valgrind_03_0.tesh’
‘ref/tests/e5/valgrind_03_1.tesh’ -> ‘03/tests/e5/valgrind_03_1.tesh’
‘ref/tests/e5/valgrind_04_0.tesh’ -> ‘03/tests/e5/valgrind_04_0.tesh’
‘ref/tests/e5/valgrind_04_1.tesh’ -> ‘03/tests/e5/valgrind_04_1.tesh’
‘ref/tests/e5/valgrind_05_0.tesh’ -> ‘03/tests/e5/valgrind_05_0.tesh’
‘ref/tests/e5/valgrind_05_1.tesh’ -> ‘03/tests/e5/valgrind_05_1.tesh’
‘ref/tests/e5/valgrind_06_0.tesh’ -> ‘03/tests/e5/valgrind_06_0.tesh’
‘ref/tests/e5/valgrind_06_1.tesh’ -> ‘03/tests/e5/valgrind_06_1.tesh’
‘ref/tests/e5/valgrind_07_0.tesh’ -> ‘03/tests/e5/valgrind_07_0.tesh’
‘ref/tests/e5/valgrind_07_1.tesh’ -> ‘03/tests/e5/valgrind_07_1.tesh’
‘ref/tests/e5/valgrind_08_0.tesh’ -> ‘03/tests/e5/valgrind_08_0.tesh’
‘ref/tests/e5/valgrind_08_1.tesh’ -> ‘03/tests/e5/valgrind_08_1.tesh’
‘ref/tests/e5/valgrind_09_0.tesh’ -> ‘03/tests/e5/valgrind_09_0.tesh’
‘ref/tests/e5/valgrind_09_1.tesh’ -> ‘03/tests/e5/valgrind_09_1.tesh’
‘ref/tests/e5/valgrind_10_0.tesh’ -> ‘03/tests/e5/valgrind_10_0.tesh’
‘ref/tests/e5/valgrind_10_1.tesh’ -> ‘03/tests/e5/valgrind_10_1.tesh’
‘ref/tests/e5/valgrind_11_0.tesh’ -> ‘03/tests/e5/valgrind_11_0.tesh’
‘ref/tests/e5/valgrind_11_1.tesh’ -> ‘03/tests/e5/valgrind_11_1.tesh’
‘ref/tests/e5/valgrind_12_0.tesh’ -> ‘03/tests/e5/valgrind_12_0.tesh’
‘ref/tests/e5/valgrind_12_1.tesh’ -> ‘03/tests/e5/valgrind_12_1.tesh’
‘ref/tests/e5/valgrind_13_0.tesh’ -> ‘03/tests/e5/valgrind_13_0.tesh’
‘ref/tests/e5/valgrind_13_1.tesh’ -> ‘03/tests/e5/valgrind_13_1.tesh’
‘ref/tests/e5/valgrind_14_0.tesh’ -> ‘03/tests/e5/valgrind_14_0.tesh’
‘ref/tests/e5/valgrind_14_1.tesh’ -> ‘03/tests/e5/valgrind_14_1.tesh’
‘ref/tests/e5/valgrind_15_0.tesh’ -> ‘03/tests/e5/valgrind_15_0.tesh’
‘ref/tests/e5/valgrind_15_1.tesh’ -> ‘03/tests/e5/valgrind_15_1.tesh’
‘ref/tests/e5/valgrind_16_0.tesh’ -> ‘03/tests/e5/valgrind_16_0.tesh’
‘ref/tests/e5/valgrind_16_1.tesh’ -> ‘03/tests/e5/valgrind_16_1.tesh’
‘ref/tests/e5/valgrind_17_0.tesh’ -> ‘03/tests/e5/valgrind_17_0.tesh’
‘ref/tests/e5/valgrind_17_1.tesh’ -> ‘03/tests/e5/valgrind_17_1.tesh’
‘ref/tests/e5/valgrind_18_0.tesh’ -> ‘03/tests/e5/valgrind_18_0.tesh’
‘ref/tests/e5/valgrind_18_1.tesh’ -> ‘03/tests/e5/valgrind_18_1.tesh’
‘ref/tests/e5/verify’ -> ‘03/tests/e5/verify’
‘ref/tests/e5/verify-new’ -> ‘03/tests/e5/verify-new’
‘ref/tests/e5/expected’ -> ‘03/tests/e5/expected’
‘ref/tests/e5/expected/00.out’ -> ‘03/tests/e5/expected/00.out’
‘ref/tests/e5/expected/01.out’ -> ‘03/tests/e5/expected/01.out’
‘ref/tests/e5/expected/02.out’ -> ‘03/tests/e5/expected/02.out’
‘ref/tests/e5/expected/03.out’ -> ‘03/tests/e5/expected/03.out’
‘ref/tests/e5/expected/04.out’ -> ‘03/tests/e5/expected/04.out’
‘ref/tests/e5/expected/05.out’ -> ‘03/tests/e5/expected/05.out’
‘ref/tests/e5/expected/06.out’ -> ‘03/tests/e5/expected/06.out’
‘ref/tests/e5/expected/07.out’ -> ‘03/tests/e5/expected/07.out’
‘ref/tests/e5/expected/08.out’ -> ‘03/tests/e5/expected/08.out’
‘ref/tests/e5/input’ -> ‘03/tests/e5/input’
‘ref/tests/e5/input/e00_0.amarela’ -> ‘03/tests/e5/input/e00_0.amarela’
‘ref/tests/e5/input/e00_1.amarela’ -> ‘03/tests/e5/input/e00_1.amarela’
‘ref/tests/e5/input/e01_0.amarela’ -> ‘03/tests/e5/input/e01_0.amarela’
‘ref/tests/e5/input/e01_1.amarela’ -> ‘03/tests/e5/input/e01_1.amarela’
‘ref/tests/e5/input/e02_0.amarela’ -> ‘03/tests/e5/input/e02_0.amarela’
‘ref/tests/e5/input/e02_1.amarela’ -> ‘03/tests/e5/input/e02_1.amarela’
‘ref/tests/e5/input/e03_0.amarela’ -> ‘03/tests/e5/input/e03_0.amarela’
‘ref/tests/e5/input/e03_1.amarela’ -> ‘03/tests/e5/input/e03_1.amarela’
‘ref/tests/e5/input/e04_0.amarela’ -> ‘03/tests/e5/input/e04_0.amarela’
‘ref/tests/e5/input/e04_1.amarela’ -> ‘03/tests/e5/input/e04_1.amarela’
‘ref/tests/e5/input/e05_0.amarela’ -> ‘03/tests/e5/input/e05_0.amarela’
‘ref/tests/e5/input/e05_1.amarela’ -> ‘03/tests/e5/input/e05_1.amarela’
‘ref/tests/e5/input/e06_0.amarela’ -> ‘03/tests/e5/input/e06_0.amarela’
‘ref/tests/e5/input/e06_1.amarela’ -> ‘03/tests/e5/input/e06_1.amarela’
‘ref/tests/e5/input/e07_0.amarela’ -> ‘03/tests/e5/input/e07_0.amarela’
‘ref/tests/e5/input/e07_1.amarela’ -> ‘03/tests/e5/input/e07_1.amarela’
‘ref/tests/e5/input/e08_0.amarela’ -> ‘03/tests/e5/input/e08_0.amarela’
‘ref/tests/e5/input/e08_1.amarela’ -> ‘03/tests/e5/input/e08_1.amarela’
‘ref/tests/e5/input/e09_0.amarela’ -> ‘03/tests/e5/input/e09_0.amarela’
‘ref/tests/e5/input/e09_1.amarela’ -> ‘03/tests/e5/input/e09_1.amarela’
‘ref/tests/e5/input/e10_0.amarela’ -> ‘03/tests/e5/input/e10_0.amarela’
‘ref/tests/e5/input/e10_1.amarela’ -> ‘03/tests/e5/input/e10_1.amarela’
‘ref/tests/e5/input/e11_0.amarela’ -> ‘03/tests/e5/input/e11_0.amarela’
‘ref/tests/e5/input/e11_1.amarela’ -> ‘03/tests/e5/input/e11_1.amarela’
‘ref/tests/e5/input/e12_0.amarela’ -> ‘03/tests/e5/input/e12_0.amarela’
‘ref/tests/e5/input/e12_1.amarela’ -> ‘03/tests/e5/input/e12_1.amarela’
‘ref/tests/e5/input/e13_0.amarela’ -> ‘03/tests/e5/input/e13_0.amarela’
‘ref/tests/e5/input/e13_1.amarela’ -> ‘03/tests/e5/input/e13_1.amarela’
‘ref/tests/e5/input/e14_0.amarela’ -> ‘03/tests/e5/input/e14_0.amarela’
‘ref/tests/e5/input/e14_1.amarela’ -> ‘03/tests/e5/input/e14_1.amarela’
‘ref/tests/e5/input/e15_0.amarela’ -> ‘03/tests/e5/input/e15_0.amarela’
‘ref/tests/e5/input/e15_1.amarela’ -> ‘03/tests/e5/input/e15_1.amarela’
‘ref/tests/e5/input/e16_0.amarela’ -> ‘03/tests/e5/input/e16_0.amarela’
‘ref/tests/e5/input/e16_1.amarela’ -> ‘03/tests/e5/input/e16_1.amarela’
‘ref/tests/e5/input/e17_0.amarela’ -> ‘03/tests/e5/input/e17_0.amarela’
‘ref/tests/e5/input/e17_1.amarela’ -> ‘03/tests/e5/input/e17_1.amarela’
‘ref/tests/e5/input/e18_0.amarela’ -> ‘03/tests/e5/input/e18_0.amarela’
‘ref/tests/e5/input/e18_1.amarela’ -> ‘03/tests/e5/input/e18_1.amarela’
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found FLEX: /usr/bin/flex (found version "2.5.39") 
-- Found BISON: /usr/bin/bison (found version "3.0.2") 
-- Setting build type to 'Debug' as none was specified.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/schnorr/ensino/inf01147-compiladores/projeto/results/etapa5/b-03
Scanning dependencies of target cc_dict_main_example
[  8%] Building C object CMakeFiles/cc_dict_main_example.dir/src/cc_dict.c.o
[ 16%] Building C object CMakeFiles/cc_dict_main_example.dir/src/cc_dict_main_example.c.o
Linking C executable cc_dict_main_example
[ 16%] Built target cc_dict_main_example
[ 25%] [BISON][parser] Building parser with bison 3.0.2
[ 33%] [FLEX][scanner] Building scanner with flex 2.5.39
Scanning dependencies of target main
[ 41%] Building C object CMakeFiles/main.dir/scanner.c.o
[ 50%] Building C object CMakeFiles/main.dir/parser.c.o
[ 58%] Building C object CMakeFiles/main.dir/src/main.c.o
[ 66%] Building C object CMakeFiles/main.dir/src/cc_misc.c.o
[ 75%] Building C object CMakeFiles/main.dir/src/cc_gv.c.o
[ 83%] Building C object CMakeFiles/main.dir/src/cc_dict.c.o
[ 91%] Building C object CMakeFiles/main.dir/src/cc_list.c.o
[100%] Building C object CMakeFiles/main.dir/src/cc_tree.c.o
Linking C executable main
[100%] Built target main
04 git@bitbucket.org:rsboos/compil-2016-1-etapa1.git etapa5
‘ref/tests/e5/’ -> ‘04/tests/e5’
‘ref/tests/e5/avaliacao_00_0.tesh’ -> ‘04/tests/e5/avaliacao_00_0.tesh’
‘ref/tests/e5/avaliacao_00_1.tesh’ -> ‘04/tests/e5/avaliacao_00_1.tesh’
‘ref/tests/e5/avaliacao_01_0.tesh’ -> ‘04/tests/e5/avaliacao_01_0.tesh’
‘ref/tests/e5/avaliacao_01_1.tesh’ -> ‘04/tests/e5/avaliacao_01_1.tesh’
‘ref/tests/e5/avaliacao_02_0.tesh’ -> ‘04/tests/e5/avaliacao_02_0.tesh’
‘ref/tests/e5/avaliacao_02_1.tesh’ -> ‘04/tests/e5/avaliacao_02_1.tesh’
‘ref/tests/e5/avaliacao_03_0.tesh’ -> ‘04/tests/e5/avaliacao_03_0.tesh’
‘ref/tests/e5/avaliacao_03_1.tesh’ -> ‘04/tests/e5/avaliacao_03_1.tesh’
‘ref/tests/e5/avaliacao_04_0.tesh’ -> ‘04/tests/e5/avaliacao_04_0.tesh’
‘ref/tests/e5/avaliacao_04_1.tesh’ -> ‘04/tests/e5/avaliacao_04_1.tesh’
‘ref/tests/e5/avaliacao_05_0.tesh’ -> ‘04/tests/e5/avaliacao_05_0.tesh’
‘ref/tests/e5/avaliacao_05_1.tesh’ -> ‘04/tests/e5/avaliacao_05_1.tesh’
‘ref/tests/e5/avaliacao_06_0.tesh’ -> ‘04/tests/e5/avaliacao_06_0.tesh’
‘ref/tests/e5/avaliacao_06_1.tesh’ -> ‘04/tests/e5/avaliacao_06_1.tesh’
‘ref/tests/e5/avaliacao_07_0.tesh’ -> ‘04/tests/e5/avaliacao_07_0.tesh’
‘ref/tests/e5/avaliacao_07_1.tesh’ -> ‘04/tests/e5/avaliacao_07_1.tesh’
‘ref/tests/e5/avaliacao_08_0.tesh’ -> ‘04/tests/e5/avaliacao_08_0.tesh’
‘ref/tests/e5/avaliacao_08_1.tesh’ -> ‘04/tests/e5/avaliacao_08_1.tesh’
‘ref/tests/e5/avaliacao_09_0.tesh’ -> ‘04/tests/e5/avaliacao_09_0.tesh’
‘ref/tests/e5/avaliacao_09_1.tesh’ -> ‘04/tests/e5/avaliacao_09_1.tesh’
‘ref/tests/e5/avaliacao_10_0.tesh’ -> ‘04/tests/e5/avaliacao_10_0.tesh’
‘ref/tests/e5/avaliacao_10_1.tesh’ -> ‘04/tests/e5/avaliacao_10_1.tesh’
‘ref/tests/e5/avaliacao_11_0.tesh’ -> ‘04/tests/e5/avaliacao_11_0.tesh’
‘ref/tests/e5/avaliacao_11_1.tesh’ -> ‘04/tests/e5/avaliacao_11_1.tesh’
‘ref/tests/e5/avaliacao_12_0.tesh’ -> ‘04/tests/e5/avaliacao_12_0.tesh’
‘ref/tests/e5/avaliacao_12_1.tesh’ -> ‘04/tests/e5/avaliacao_12_1.tesh’
‘ref/tests/e5/avaliacao_13_0.tesh’ -> ‘04/tests/e5/avaliacao_13_0.tesh’
‘ref/tests/e5/avaliacao_13_1.tesh’ -> ‘04/tests/e5/avaliacao_13_1.tesh’
‘ref/tests/e5/avaliacao_14_0.tesh’ -> ‘04/tests/e5/avaliacao_14_0.tesh’
‘ref/tests/e5/avaliacao_14_1.tesh’ -> ‘04/tests/e5/avaliacao_14_1.tesh’
‘ref/tests/e5/avaliacao_15_0.tesh’ -> ‘04/tests/e5/avaliacao_15_0.tesh’
‘ref/tests/e5/avaliacao_15_1.tesh’ -> ‘04/tests/e5/avaliacao_15_1.tesh’
‘ref/tests/e5/avaliacao_16_0.tesh’ -> ‘04/tests/e5/avaliacao_16_0.tesh’
‘ref/tests/e5/avaliacao_16_1.tesh’ -> ‘04/tests/e5/avaliacao_16_1.tesh’
‘ref/tests/e5/avaliacao_17_0.tesh’ -> ‘04/tests/e5/avaliacao_17_0.tesh’
‘ref/tests/e5/avaliacao_17_1.tesh’ -> ‘04/tests/e5/avaliacao_17_1.tesh’
‘ref/tests/e5/avaliacao_18_0.tesh’ -> ‘04/tests/e5/avaliacao_18_0.tesh’
‘ref/tests/e5/avaliacao_18_1.tesh’ -> ‘04/tests/e5/avaliacao_18_1.tesh’
‘ref/tests/e5/execute.sh’ -> ‘04/tests/e5/execute.sh’
‘ref/tests/e5/valgrind_00_0.tesh’ -> ‘04/tests/e5/valgrind_00_0.tesh’
‘ref/tests/e5/valgrind_00_1.tesh’ -> ‘04/tests/e5/valgrind_00_1.tesh’
‘ref/tests/e5/valgrind_01_0.tesh’ -> ‘04/tests/e5/valgrind_01_0.tesh’
‘ref/tests/e5/valgrind_01_1.tesh’ -> ‘04/tests/e5/valgrind_01_1.tesh’
‘ref/tests/e5/valgrind_02_0.tesh’ -> ‘04/tests/e5/valgrind_02_0.tesh’
‘ref/tests/e5/valgrind_02_1.tesh’ -> ‘04/tests/e5/valgrind_02_1.tesh’
‘ref/tests/e5/valgrind_03_0.tesh’ -> ‘04/tests/e5/valgrind_03_0.tesh’
‘ref/tests/e5/valgrind_03_1.tesh’ -> ‘04/tests/e5/valgrind_03_1.tesh’
‘ref/tests/e5/valgrind_04_0.tesh’ -> ‘04/tests/e5/valgrind_04_0.tesh’
‘ref/tests/e5/valgrind_04_1.tesh’ -> ‘04/tests/e5/valgrind_04_1.tesh’
‘ref/tests/e5/valgrind_05_0.tesh’ -> ‘04/tests/e5/valgrind_05_0.tesh’
‘ref/tests/e5/valgrind_05_1.tesh’ -> ‘04/tests/e5/valgrind_05_1.tesh’
‘ref/tests/e5/valgrind_06_0.tesh’ -> ‘04/tests/e5/valgrind_06_0.tesh’
‘ref/tests/e5/valgrind_06_1.tesh’ -> ‘04/tests/e5/valgrind_06_1.tesh’
‘ref/tests/e5/valgrind_07_0.tesh’ -> ‘04/tests/e5/valgrind_07_0.tesh’
‘ref/tests/e5/valgrind_07_1.tesh’ -> ‘04/tests/e5/valgrind_07_1.tesh’
‘ref/tests/e5/valgrind_08_0.tesh’ -> ‘04/tests/e5/valgrind_08_0.tesh’
‘ref/tests/e5/valgrind_08_1.tesh’ -> ‘04/tests/e5/valgrind_08_1.tesh’
‘ref/tests/e5/valgrind_09_0.tesh’ -> ‘04/tests/e5/valgrind_09_0.tesh’
‘ref/tests/e5/valgrind_09_1.tesh’ -> ‘04/tests/e5/valgrind_09_1.tesh’
‘ref/tests/e5/valgrind_10_0.tesh’ -> ‘04/tests/e5/valgrind_10_0.tesh’
‘ref/tests/e5/valgrind_10_1.tesh’ -> ‘04/tests/e5/valgrind_10_1.tesh’
‘ref/tests/e5/valgrind_11_0.tesh’ -> ‘04/tests/e5/valgrind_11_0.tesh’
‘ref/tests/e5/valgrind_11_1.tesh’ -> ‘04/tests/e5/valgrind_11_1.tesh’
‘ref/tests/e5/valgrind_12_0.tesh’ -> ‘04/tests/e5/valgrind_12_0.tesh’
‘ref/tests/e5/valgrind_12_1.tesh’ -> ‘04/tests/e5/valgrind_12_1.tesh’
‘ref/tests/e5/valgrind_13_0.tesh’ -> ‘04/tests/e5/valgrind_13_0.tesh’
‘ref/tests/e5/valgrind_13_1.tesh’ -> ‘04/tests/e5/valgrind_13_1.tesh’
‘ref/tests/e5/valgrind_14_0.tesh’ -> ‘04/tests/e5/valgrind_14_0.tesh’
‘ref/tests/e5/valgrind_14_1.tesh’ -> ‘04/tests/e5/valgrind_14_1.tesh’
‘ref/tests/e5/valgrind_15_0.tesh’ -> ‘04/tests/e5/valgrind_15_0.tesh’
‘ref/tests/e5/valgrind_15_1.tesh’ -> ‘04/tests/e5/valgrind_15_1.tesh’
‘ref/tests/e5/valgrind_16_0.tesh’ -> ‘04/tests/e5/valgrind_16_0.tesh’
‘ref/tests/e5/valgrind_16_1.tesh’ -> ‘04/tests/e5/valgrind_16_1.tesh’
‘ref/tests/e5/valgrind_17_0.tesh’ -> ‘04/tests/e5/valgrind_17_0.tesh’
‘ref/tests/e5/valgrind_17_1.tesh’ -> ‘04/tests/e5/valgrind_17_1.tesh’
‘ref/tests/e5/valgrind_18_0.tesh’ -> ‘04/tests/e5/valgrind_18_0.tesh’
‘ref/tests/e5/valgrind_18_1.tesh’ -> ‘04/tests/e5/valgrind_18_1.tesh’
‘ref/tests/e5/verify’ -> ‘04/tests/e5/verify’
‘ref/tests/e5/verify-new’ -> ‘04/tests/e5/verify-new’
‘ref/tests/e5/expected’ -> ‘04/tests/e5/expected’
‘ref/tests/e5/expected/00.out’ -> ‘04/tests/e5/expected/00.out’
‘ref/tests/e5/expected/01.out’ -> ‘04/tests/e5/expected/01.out’
‘ref/tests/e5/expected/02.out’ -> ‘04/tests/e5/expected/02.out’
‘ref/tests/e5/expected/03.out’ -> ‘04/tests/e5/expected/03.out’
‘ref/tests/e5/expected/04.out’ -> ‘04/tests/e5/expected/04.out’
‘ref/tests/e5/expected/05.out’ -> ‘04/tests/e5/expected/05.out’
‘ref/tests/e5/expected/06.out’ -> ‘04/tests/e5/expected/06.out’
‘ref/tests/e5/expected/07.out’ -> ‘04/tests/e5/expected/07.out’
‘ref/tests/e5/expected/08.out’ -> ‘04/tests/e5/expected/08.out’
‘ref/tests/e5/input’ -> ‘04/tests/e5/input’
‘ref/tests/e5/input/e00_0.amarela’ -> ‘04/tests/e5/input/e00_0.amarela’
‘ref/tests/e5/input/e00_1.amarela’ -> ‘04/tests/e5/input/e00_1.amarela’
‘ref/tests/e5/input/e01_0.amarela’ -> ‘04/tests/e5/input/e01_0.amarela’
‘ref/tests/e5/input/e01_1.amarela’ -> ‘04/tests/e5/input/e01_1.amarela’
‘ref/tests/e5/input/e02_0.amarela’ -> ‘04/tests/e5/input/e02_0.amarela’
‘ref/tests/e5/input/e02_1.amarela’ -> ‘04/tests/e5/input/e02_1.amarela’
‘ref/tests/e5/input/e03_0.amarela’ -> ‘04/tests/e5/input/e03_0.amarela’
‘ref/tests/e5/input/e03_1.amarela’ -> ‘04/tests/e5/input/e03_1.amarela’
‘ref/tests/e5/input/e04_0.amarela’ -> ‘04/tests/e5/input/e04_0.amarela’
‘ref/tests/e5/input/e04_1.amarela’ -> ‘04/tests/e5/input/e04_1.amarela’
‘ref/tests/e5/input/e05_0.amarela’ -> ‘04/tests/e5/input/e05_0.amarela’
‘ref/tests/e5/input/e05_1.amarela’ -> ‘04/tests/e5/input/e05_1.amarela’
‘ref/tests/e5/input/e06_0.amarela’ -> ‘04/tests/e5/input/e06_0.amarela’
‘ref/tests/e5/input/e06_1.amarela’ -> ‘04/tests/e5/input/e06_1.amarela’
‘ref/tests/e5/input/e07_0.amarela’ -> ‘04/tests/e5/input/e07_0.amarela’
‘ref/tests/e5/input/e07_1.amarela’ -> ‘04/tests/e5/input/e07_1.amarela’
‘ref/tests/e5/input/e08_0.amarela’ -> ‘04/tests/e5/input/e08_0.amarela’
‘ref/tests/e5/input/e08_1.amarela’ -> ‘04/tests/e5/input/e08_1.amarela’
‘ref/tests/e5/input/e09_0.amarela’ -> ‘04/tests/e5/input/e09_0.amarela’
‘ref/tests/e5/input/e09_1.amarela’ -> ‘04/tests/e5/input/e09_1.amarela’
‘ref/tests/e5/input/e10_0.amarela’ -> ‘04/tests/e5/input/e10_0.amarela’
‘ref/tests/e5/input/e10_1.amarela’ -> ‘04/tests/e5/input/e10_1.amarela’
‘ref/tests/e5/input/e11_0.amarela’ -> ‘04/tests/e5/input/e11_0.amarela’
‘ref/tests/e5/input/e11_1.amarela’ -> ‘04/tests/e5/input/e11_1.amarela’
‘ref/tests/e5/input/e12_0.amarela’ -> ‘04/tests/e5/input/e12_0.amarela’
‘ref/tests/e5/input/e12_1.amarela’ -> ‘04/tests/e5/input/e12_1.amarela’
‘ref/tests/e5/input/e13_0.amarela’ -> ‘04/tests/e5/input/e13_0.amarela’
‘ref/tests/e5/input/e13_1.amarela’ -> ‘04/tests/e5/input/e13_1.amarela’
‘ref/tests/e5/input/e14_0.amarela’ -> ‘04/tests/e5/input/e14_0.amarela’
‘ref/tests/e5/input/e14_1.amarela’ -> ‘04/tests/e5/input/e14_1.amarela’
‘ref/tests/e5/input/e15_0.amarela’ -> ‘04/tests/e5/input/e15_0.amarela’
‘ref/tests/e5/input/e15_1.amarela’ -> ‘04/tests/e5/input/e15_1.amarela’
‘ref/tests/e5/input/e16_0.amarela’ -> ‘04/tests/e5/input/e16_0.amarela’
‘ref/tests/e5/input/e16_1.amarela’ -> ‘04/tests/e5/input/e16_1.amarela’
‘ref/tests/e5/input/e17_0.amarela’ -> ‘04/tests/e5/input/e17_0.amarela’
‘ref/tests/e5/input/e17_1.amarela’ -> ‘04/tests/e5/input/e17_1.amarela’
‘ref/tests/e5/input/e18_0.amarela’ -> ‘04/tests/e5/input/e18_0.amarela’
‘ref/tests/e5/input/e18_1.amarela’ -> ‘04/tests/e5/input/e18_1.amarela’
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found FLEX: /usr/bin/flex (found version "2.5.39") 
-- Found BISON: /usr/bin/bison (found version "3.0.2") 
-- Setting build type to 'Debug' as none was specified.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/schnorr/ensino/inf01147-compiladores/projeto/results/etapa5/b-04
[  9%] [BISON][parser] Building parser with bison 3.0.2
[ 18%] [FLEX][scanner] Building scanner with flex 2.5.39
Scanning dependencies of target main
[ 27%] Building C object CMakeFiles/main.dir/scanner.c.o
[ 36%] Building C object CMakeFiles/main.dir/parser.c.o
[ 45%] Building C object CMakeFiles/main.dir/src/main.c.o
[ 54%] Building C object CMakeFiles/main.dir/src/cc_misc.c.o
[ 63%] Building C object CMakeFiles/main.dir/src/cc_gv.c.o
[ 72%] Building C object CMakeFiles/main.dir/src/cc_dict.c.o
[ 81%] Building C object CMakeFiles/main.dir/src/cc_list.c.o
[ 90%] Building C object CMakeFiles/main.dir/src/cc_tree.c.o
[100%] Building C object CMakeFiles/main.dir/src/cc_stack.c.o
Linking C executable main
[100%] Built target main
06 git@bitbucket.org:luvlic/grupo-6-compil-2016-1.git solucao_etapa_5
‘ref/tests/e5/’ -> ‘06/tests/e5’
‘ref/tests/e5/avaliacao_00_0.tesh’ -> ‘06/tests/e5/avaliacao_00_0.tesh’
‘ref/tests/e5/avaliacao_00_1.tesh’ -> ‘06/tests/e5/avaliacao_00_1.tesh’
‘ref/tests/e5/avaliacao_01_0.tesh’ -> ‘06/tests/e5/avaliacao_01_0.tesh’
‘ref/tests/e5/avaliacao_01_1.tesh’ -> ‘06/tests/e5/avaliacao_01_1.tesh’
‘ref/tests/e5/avaliacao_02_0.tesh’ -> ‘06/tests/e5/avaliacao_02_0.tesh’
‘ref/tests/e5/avaliacao_02_1.tesh’ -> ‘06/tests/e5/avaliacao_02_1.tesh’
‘ref/tests/e5/avaliacao_03_0.tesh’ -> ‘06/tests/e5/avaliacao_03_0.tesh’
‘ref/tests/e5/avaliacao_03_1.tesh’ -> ‘06/tests/e5/avaliacao_03_1.tesh’
‘ref/tests/e5/avaliacao_04_0.tesh’ -> ‘06/tests/e5/avaliacao_04_0.tesh’
‘ref/tests/e5/avaliacao_04_1.tesh’ -> ‘06/tests/e5/avaliacao_04_1.tesh’
‘ref/tests/e5/avaliacao_05_0.tesh’ -> ‘06/tests/e5/avaliacao_05_0.tesh’
‘ref/tests/e5/avaliacao_05_1.tesh’ -> ‘06/tests/e5/avaliacao_05_1.tesh’
‘ref/tests/e5/avaliacao_06_0.tesh’ -> ‘06/tests/e5/avaliacao_06_0.tesh’
‘ref/tests/e5/avaliacao_06_1.tesh’ -> ‘06/tests/e5/avaliacao_06_1.tesh’
‘ref/tests/e5/avaliacao_07_0.tesh’ -> ‘06/tests/e5/avaliacao_07_0.tesh’
‘ref/tests/e5/avaliacao_07_1.tesh’ -> ‘06/tests/e5/avaliacao_07_1.tesh’
‘ref/tests/e5/avaliacao_08_0.tesh’ -> ‘06/tests/e5/avaliacao_08_0.tesh’
‘ref/tests/e5/avaliacao_08_1.tesh’ -> ‘06/tests/e5/avaliacao_08_1.tesh’
‘ref/tests/e5/avaliacao_09_0.tesh’ -> ‘06/tests/e5/avaliacao_09_0.tesh’
‘ref/tests/e5/avaliacao_09_1.tesh’ -> ‘06/tests/e5/avaliacao_09_1.tesh’
‘ref/tests/e5/avaliacao_10_0.tesh’ -> ‘06/tests/e5/avaliacao_10_0.tesh’
‘ref/tests/e5/avaliacao_10_1.tesh’ -> ‘06/tests/e5/avaliacao_10_1.tesh’
‘ref/tests/e5/avaliacao_11_0.tesh’ -> ‘06/tests/e5/avaliacao_11_0.tesh’
‘ref/tests/e5/avaliacao_11_1.tesh’ -> ‘06/tests/e5/avaliacao_11_1.tesh’
‘ref/tests/e5/avaliacao_12_0.tesh’ -> ‘06/tests/e5/avaliacao_12_0.tesh’
‘ref/tests/e5/avaliacao_12_1.tesh’ -> ‘06/tests/e5/avaliacao_12_1.tesh’
‘ref/tests/e5/avaliacao_13_0.tesh’ -> ‘06/tests/e5/avaliacao_13_0.tesh’
‘ref/tests/e5/avaliacao_13_1.tesh’ -> ‘06/tests/e5/avaliacao_13_1.tesh’
‘ref/tests/e5/avaliacao_14_0.tesh’ -> ‘06/tests/e5/avaliacao_14_0.tesh’
‘ref/tests/e5/avaliacao_14_1.tesh’ -> ‘06/tests/e5/avaliacao_14_1.tesh’
‘ref/tests/e5/avaliacao_15_0.tesh’ -> ‘06/tests/e5/avaliacao_15_0.tesh’
‘ref/tests/e5/avaliacao_15_1.tesh’ -> ‘06/tests/e5/avaliacao_15_1.tesh’
‘ref/tests/e5/avaliacao_16_0.tesh’ -> ‘06/tests/e5/avaliacao_16_0.tesh’
‘ref/tests/e5/avaliacao_16_1.tesh’ -> ‘06/tests/e5/avaliacao_16_1.tesh’
‘ref/tests/e5/avaliacao_17_0.tesh’ -> ‘06/tests/e5/avaliacao_17_0.tesh’
‘ref/tests/e5/avaliacao_17_1.tesh’ -> ‘06/tests/e5/avaliacao_17_1.tesh’
‘ref/tests/e5/avaliacao_18_0.tesh’ -> ‘06/tests/e5/avaliacao_18_0.tesh’
‘ref/tests/e5/avaliacao_18_1.tesh’ -> ‘06/tests/e5/avaliacao_18_1.tesh’
‘ref/tests/e5/execute.sh’ -> ‘06/tests/e5/execute.sh’
‘ref/tests/e5/valgrind_00_0.tesh’ -> ‘06/tests/e5/valgrind_00_0.tesh’
‘ref/tests/e5/valgrind_00_1.tesh’ -> ‘06/tests/e5/valgrind_00_1.tesh’
‘ref/tests/e5/valgrind_01_0.tesh’ -> ‘06/tests/e5/valgrind_01_0.tesh’
‘ref/tests/e5/valgrind_01_1.tesh’ -> ‘06/tests/e5/valgrind_01_1.tesh’
‘ref/tests/e5/valgrind_02_0.tesh’ -> ‘06/tests/e5/valgrind_02_0.tesh’
‘ref/tests/e5/valgrind_02_1.tesh’ -> ‘06/tests/e5/valgrind_02_1.tesh’
‘ref/tests/e5/valgrind_03_0.tesh’ -> ‘06/tests/e5/valgrind_03_0.tesh’
‘ref/tests/e5/valgrind_03_1.tesh’ -> ‘06/tests/e5/valgrind_03_1.tesh’
‘ref/tests/e5/valgrind_04_0.tesh’ -> ‘06/tests/e5/valgrind_04_0.tesh’
‘ref/tests/e5/valgrind_04_1.tesh’ -> ‘06/tests/e5/valgrind_04_1.tesh’
‘ref/tests/e5/valgrind_05_0.tesh’ -> ‘06/tests/e5/valgrind_05_0.tesh’
‘ref/tests/e5/valgrind_05_1.tesh’ -> ‘06/tests/e5/valgrind_05_1.tesh’
‘ref/tests/e5/valgrind_06_0.tesh’ -> ‘06/tests/e5/valgrind_06_0.tesh’
‘ref/tests/e5/valgrind_06_1.tesh’ -> ‘06/tests/e5/valgrind_06_1.tesh’
‘ref/tests/e5/valgrind_07_0.tesh’ -> ‘06/tests/e5/valgrind_07_0.tesh’
‘ref/tests/e5/valgrind_07_1.tesh’ -> ‘06/tests/e5/valgrind_07_1.tesh’
‘ref/tests/e5/valgrind_08_0.tesh’ -> ‘06/tests/e5/valgrind_08_0.tesh’
‘ref/tests/e5/valgrind_08_1.tesh’ -> ‘06/tests/e5/valgrind_08_1.tesh’
‘ref/tests/e5/valgrind_09_0.tesh’ -> ‘06/tests/e5/valgrind_09_0.tesh’
‘ref/tests/e5/valgrind_09_1.tesh’ -> ‘06/tests/e5/valgrind_09_1.tesh’
‘ref/tests/e5/valgrind_10_0.tesh’ -> ‘06/tests/e5/valgrind_10_0.tesh’
‘ref/tests/e5/valgrind_10_1.tesh’ -> ‘06/tests/e5/valgrind_10_1.tesh’
‘ref/tests/e5/valgrind_11_0.tesh’ -> ‘06/tests/e5/valgrind_11_0.tesh’
‘ref/tests/e5/valgrind_11_1.tesh’ -> ‘06/tests/e5/valgrind_11_1.tesh’
‘ref/tests/e5/valgrind_12_0.tesh’ -> ‘06/tests/e5/valgrind_12_0.tesh’
‘ref/tests/e5/valgrind_12_1.tesh’ -> ‘06/tests/e5/valgrind_12_1.tesh’
‘ref/tests/e5/valgrind_13_0.tesh’ -> ‘06/tests/e5/valgrind_13_0.tesh’
‘ref/tests/e5/valgrind_13_1.tesh’ -> ‘06/tests/e5/valgrind_13_1.tesh’
‘ref/tests/e5/valgrind_14_0.tesh’ -> ‘06/tests/e5/valgrind_14_0.tesh’
‘ref/tests/e5/valgrind_14_1.tesh’ -> ‘06/tests/e5/valgrind_14_1.tesh’
‘ref/tests/e5/valgrind_15_0.tesh’ -> ‘06/tests/e5/valgrind_15_0.tesh’
‘ref/tests/e5/valgrind_15_1.tesh’ -> ‘06/tests/e5/valgrind_15_1.tesh’
‘ref/tests/e5/valgrind_16_0.tesh’ -> ‘06/tests/e5/valgrind_16_0.tesh’
‘ref/tests/e5/valgrind_16_1.tesh’ -> ‘06/tests/e5/valgrind_16_1.tesh’
‘ref/tests/e5/valgrind_17_0.tesh’ -> ‘06/tests/e5/valgrind_17_0.tesh’
‘ref/tests/e5/valgrind_17_1.tesh’ -> ‘06/tests/e5/valgrind_17_1.tesh’
‘ref/tests/e5/valgrind_18_0.tesh’ -> ‘06/tests/e5/valgrind_18_0.tesh’
‘ref/tests/e5/valgrind_18_1.tesh’ -> ‘06/tests/e5/valgrind_18_1.tesh’
‘ref/tests/e5/verify’ -> ‘06/tests/e5/verify’
‘ref/tests/e5/verify-new’ -> ‘06/tests/e5/verify-new’
‘ref/tests/e5/expected’ -> ‘06/tests/e5/expected’
‘ref/tests/e5/expected/00.out’ -> ‘06/tests/e5/expected/00.out’
‘ref/tests/e5/expected/01.out’ -> ‘06/tests/e5/expected/01.out’
‘ref/tests/e5/expected/02.out’ -> ‘06/tests/e5/expected/02.out’
‘ref/tests/e5/expected/03.out’ -> ‘06/tests/e5/expected/03.out’
‘ref/tests/e5/expected/04.out’ -> ‘06/tests/e5/expected/04.out’
‘ref/tests/e5/expected/05.out’ -> ‘06/tests/e5/expected/05.out’
‘ref/tests/e5/expected/06.out’ -> ‘06/tests/e5/expected/06.out’
‘ref/tests/e5/expected/07.out’ -> ‘06/tests/e5/expected/07.out’
‘ref/tests/e5/expected/08.out’ -> ‘06/tests/e5/expected/08.out’
‘ref/tests/e5/input’ -> ‘06/tests/e5/input’
‘ref/tests/e5/input/e00_0.amarela’ -> ‘06/tests/e5/input/e00_0.amarela’
‘ref/tests/e5/input/e00_1.amarela’ -> ‘06/tests/e5/input/e00_1.amarela’
‘ref/tests/e5/input/e01_0.amarela’ -> ‘06/tests/e5/input/e01_0.amarela’
‘ref/tests/e5/input/e01_1.amarela’ -> ‘06/tests/e5/input/e01_1.amarela’
‘ref/tests/e5/input/e02_0.amarela’ -> ‘06/tests/e5/input/e02_0.amarela’
‘ref/tests/e5/input/e02_1.amarela’ -> ‘06/tests/e5/input/e02_1.amarela’
‘ref/tests/e5/input/e03_0.amarela’ -> ‘06/tests/e5/input/e03_0.amarela’
‘ref/tests/e5/input/e03_1.amarela’ -> ‘06/tests/e5/input/e03_1.amarela’
‘ref/tests/e5/input/e04_0.amarela’ -> ‘06/tests/e5/input/e04_0.amarela’
‘ref/tests/e5/input/e04_1.amarela’ -> ‘06/tests/e5/input/e04_1.amarela’
‘ref/tests/e5/input/e05_0.amarela’ -> ‘06/tests/e5/input/e05_0.amarela’
‘ref/tests/e5/input/e05_1.amarela’ -> ‘06/tests/e5/input/e05_1.amarela’
‘ref/tests/e5/input/e06_0.amarela’ -> ‘06/tests/e5/input/e06_0.amarela’
‘ref/tests/e5/input/e06_1.amarela’ -> ‘06/tests/e5/input/e06_1.amarela’
‘ref/tests/e5/input/e07_0.amarela’ -> ‘06/tests/e5/input/e07_0.amarela’
‘ref/tests/e5/input/e07_1.amarela’ -> ‘06/tests/e5/input/e07_1.amarela’
‘ref/tests/e5/input/e08_0.amarela’ -> ‘06/tests/e5/input/e08_0.amarela’
‘ref/tests/e5/input/e08_1.amarela’ -> ‘06/tests/e5/input/e08_1.amarela’
‘ref/tests/e5/input/e09_0.amarela’ -> ‘06/tests/e5/input/e09_0.amarela’
‘ref/tests/e5/input/e09_1.amarela’ -> ‘06/tests/e5/input/e09_1.amarela’
‘ref/tests/e5/input/e10_0.amarela’ -> ‘06/tests/e5/input/e10_0.amarela’
‘ref/tests/e5/input/e10_1.amarela’ -> ‘06/tests/e5/input/e10_1.amarela’
‘ref/tests/e5/input/e11_0.amarela’ -> ‘06/tests/e5/input/e11_0.amarela’
‘ref/tests/e5/input/e11_1.amarela’ -> ‘06/tests/e5/input/e11_1.amarela’
‘ref/tests/e5/input/e12_0.amarela’ -> ‘06/tests/e5/input/e12_0.amarela’
‘ref/tests/e5/input/e12_1.amarela’ -> ‘06/tests/e5/input/e12_1.amarela’
‘ref/tests/e5/input/e13_0.amarela’ -> ‘06/tests/e5/input/e13_0.amarela’
‘ref/tests/e5/input/e13_1.amarela’ -> ‘06/tests/e5/input/e13_1.amarela’
‘ref/tests/e5/input/e14_0.amarela’ -> ‘06/tests/e5/input/e14_0.amarela’
‘ref/tests/e5/input/e14_1.amarela’ -> ‘06/tests/e5/input/e14_1.amarela’
‘ref/tests/e5/input/e15_0.amarela’ -> ‘06/tests/e5/input/e15_0.amarela’
‘ref/tests/e5/input/e15_1.amarela’ -> ‘06/tests/e5/input/e15_1.amarela’
‘ref/tests/e5/input/e16_0.amarela’ -> ‘06/tests/e5/input/e16_0.amarela’
‘ref/tests/e5/input/e16_1.amarela’ -> ‘06/tests/e5/input/e16_1.amarela’
‘ref/tests/e5/input/e17_0.amarela’ -> ‘06/tests/e5/input/e17_0.amarela’
‘ref/tests/e5/input/e17_1.amarela’ -> ‘06/tests/e5/input/e17_1.amarela’
‘ref/tests/e5/input/e18_0.amarela’ -> ‘06/tests/e5/input/e18_0.amarela’
‘ref/tests/e5/input/e18_1.amarela’ -> ‘06/tests/e5/input/e18_1.amarela’
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found FLEX: /usr/bin/flex (found version "2.5.39") 
-- Found BISON: /usr/bin/bison (found version "3.0.2") 
-- Setting build type to 'Debug' as none was specified.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/schnorr/ensino/inf01147-compiladores/projeto/results/etapa5/b-06
[  9%] [BISON][parser] Building parser with bison 3.0.2
[ 18%] [FLEX][scanner] Building scanner with flex 2.5.39
Scanning dependencies of target main
[ 27%] Building C object CMakeFiles/main.dir/scanner.c.o
[ 36%] Building C object CMakeFiles/main.dir/parser.c.o
[ 45%] Building C object CMakeFiles/main.dir/src/main.c.o
[ 54%] Building C object CMakeFiles/main.dir/src/cc_misc.c.o
[ 63%] Building C object CMakeFiles/main.dir/src/cc_gv.c.o
[ 72%] Building C object CMakeFiles/main.dir/src/cc_dict.c.o
[ 81%] Building C object CMakeFiles/main.dir/src/cc_list.c.o
[ 90%] Building C object CMakeFiles/main.dir/src/cc_tree.c.o
[100%] Building C object CMakeFiles/main.dir/src/cc_codigo.c.o
Linking C executable main
[100%] Built target main
08 git@bitbucket.org:guga581/trab1_compiladores.git etapa5_concluida
‘ref/tests/e5/’ -> ‘08/tests/e5’
‘ref/tests/e5/avaliacao_00_0.tesh’ -> ‘08/tests/e5/avaliacao_00_0.tesh’
‘ref/tests/e5/avaliacao_00_1.tesh’ -> ‘08/tests/e5/avaliacao_00_1.tesh’
‘ref/tests/e5/avaliacao_01_0.tesh’ -> ‘08/tests/e5/avaliacao_01_0.tesh’
‘ref/tests/e5/avaliacao_01_1.tesh’ -> ‘08/tests/e5/avaliacao_01_1.tesh’
‘ref/tests/e5/avaliacao_02_0.tesh’ -> ‘08/tests/e5/avaliacao_02_0.tesh’
‘ref/tests/e5/avaliacao_02_1.tesh’ -> ‘08/tests/e5/avaliacao_02_1.tesh’
‘ref/tests/e5/avaliacao_03_0.tesh’ -> ‘08/tests/e5/avaliacao_03_0.tesh’
‘ref/tests/e5/avaliacao_03_1.tesh’ -> ‘08/tests/e5/avaliacao_03_1.tesh’
‘ref/tests/e5/avaliacao_04_0.tesh’ -> ‘08/tests/e5/avaliacao_04_0.tesh’
‘ref/tests/e5/avaliacao_04_1.tesh’ -> ‘08/tests/e5/avaliacao_04_1.tesh’
‘ref/tests/e5/avaliacao_05_0.tesh’ -> ‘08/tests/e5/avaliacao_05_0.tesh’
‘ref/tests/e5/avaliacao_05_1.tesh’ -> ‘08/tests/e5/avaliacao_05_1.tesh’
‘ref/tests/e5/avaliacao_06_0.tesh’ -> ‘08/tests/e5/avaliacao_06_0.tesh’
‘ref/tests/e5/avaliacao_06_1.tesh’ -> ‘08/tests/e5/avaliacao_06_1.tesh’
‘ref/tests/e5/avaliacao_07_0.tesh’ -> ‘08/tests/e5/avaliacao_07_0.tesh’
‘ref/tests/e5/avaliacao_07_1.tesh’ -> ‘08/tests/e5/avaliacao_07_1.tesh’
‘ref/tests/e5/avaliacao_08_0.tesh’ -> ‘08/tests/e5/avaliacao_08_0.tesh’
‘ref/tests/e5/avaliacao_08_1.tesh’ -> ‘08/tests/e5/avaliacao_08_1.tesh’
‘ref/tests/e5/avaliacao_09_0.tesh’ -> ‘08/tests/e5/avaliacao_09_0.tesh’
‘ref/tests/e5/avaliacao_09_1.tesh’ -> ‘08/tests/e5/avaliacao_09_1.tesh’
‘ref/tests/e5/avaliacao_10_0.tesh’ -> ‘08/tests/e5/avaliacao_10_0.tesh’
‘ref/tests/e5/avaliacao_10_1.tesh’ -> ‘08/tests/e5/avaliacao_10_1.tesh’
‘ref/tests/e5/avaliacao_11_0.tesh’ -> ‘08/tests/e5/avaliacao_11_0.tesh’
‘ref/tests/e5/avaliacao_11_1.tesh’ -> ‘08/tests/e5/avaliacao_11_1.tesh’
‘ref/tests/e5/avaliacao_12_0.tesh’ -> ‘08/tests/e5/avaliacao_12_0.tesh’
‘ref/tests/e5/avaliacao_12_1.tesh’ -> ‘08/tests/e5/avaliacao_12_1.tesh’
‘ref/tests/e5/avaliacao_13_0.tesh’ -> ‘08/tests/e5/avaliacao_13_0.tesh’
‘ref/tests/e5/avaliacao_13_1.tesh’ -> ‘08/tests/e5/avaliacao_13_1.tesh’
‘ref/tests/e5/avaliacao_14_0.tesh’ -> ‘08/tests/e5/avaliacao_14_0.tesh’
‘ref/tests/e5/avaliacao_14_1.tesh’ -> ‘08/tests/e5/avaliacao_14_1.tesh’
‘ref/tests/e5/avaliacao_15_0.tesh’ -> ‘08/tests/e5/avaliacao_15_0.tesh’
‘ref/tests/e5/avaliacao_15_1.tesh’ -> ‘08/tests/e5/avaliacao_15_1.tesh’
‘ref/tests/e5/avaliacao_16_0.tesh’ -> ‘08/tests/e5/avaliacao_16_0.tesh’
‘ref/tests/e5/avaliacao_16_1.tesh’ -> ‘08/tests/e5/avaliacao_16_1.tesh’
‘ref/tests/e5/avaliacao_17_0.tesh’ -> ‘08/tests/e5/avaliacao_17_0.tesh’
‘ref/tests/e5/avaliacao_17_1.tesh’ -> ‘08/tests/e5/avaliacao_17_1.tesh’
‘ref/tests/e5/avaliacao_18_0.tesh’ -> ‘08/tests/e5/avaliacao_18_0.tesh’
‘ref/tests/e5/avaliacao_18_1.tesh’ -> ‘08/tests/e5/avaliacao_18_1.tesh’
‘ref/tests/e5/execute.sh’ -> ‘08/tests/e5/execute.sh’
‘ref/tests/e5/valgrind_00_0.tesh’ -> ‘08/tests/e5/valgrind_00_0.tesh’
‘ref/tests/e5/valgrind_00_1.tesh’ -> ‘08/tests/e5/valgrind_00_1.tesh’
‘ref/tests/e5/valgrind_01_0.tesh’ -> ‘08/tests/e5/valgrind_01_0.tesh’
‘ref/tests/e5/valgrind_01_1.tesh’ -> ‘08/tests/e5/valgrind_01_1.tesh’
‘ref/tests/e5/valgrind_02_0.tesh’ -> ‘08/tests/e5/valgrind_02_0.tesh’
‘ref/tests/e5/valgrind_02_1.tesh’ -> ‘08/tests/e5/valgrind_02_1.tesh’
‘ref/tests/e5/valgrind_03_0.tesh’ -> ‘08/tests/e5/valgrind_03_0.tesh’
‘ref/tests/e5/valgrind_03_1.tesh’ -> ‘08/tests/e5/valgrind_03_1.tesh’
‘ref/tests/e5/valgrind_04_0.tesh’ -> ‘08/tests/e5/valgrind_04_0.tesh’
‘ref/tests/e5/valgrind_04_1.tesh’ -> ‘08/tests/e5/valgrind_04_1.tesh’
‘ref/tests/e5/valgrind_05_0.tesh’ -> ‘08/tests/e5/valgrind_05_0.tesh’
‘ref/tests/e5/valgrind_05_1.tesh’ -> ‘08/tests/e5/valgrind_05_1.tesh’
‘ref/tests/e5/valgrind_06_0.tesh’ -> ‘08/tests/e5/valgrind_06_0.tesh’
‘ref/tests/e5/valgrind_06_1.tesh’ -> ‘08/tests/e5/valgrind_06_1.tesh’
‘ref/tests/e5/valgrind_07_0.tesh’ -> ‘08/tests/e5/valgrind_07_0.tesh’
‘ref/tests/e5/valgrind_07_1.tesh’ -> ‘08/tests/e5/valgrind_07_1.tesh’
‘ref/tests/e5/valgrind_08_0.tesh’ -> ‘08/tests/e5/valgrind_08_0.tesh’
‘ref/tests/e5/valgrind_08_1.tesh’ -> ‘08/tests/e5/valgrind_08_1.tesh’
‘ref/tests/e5/valgrind_09_0.tesh’ -> ‘08/tests/e5/valgrind_09_0.tesh’
‘ref/tests/e5/valgrind_09_1.tesh’ -> ‘08/tests/e5/valgrind_09_1.tesh’
‘ref/tests/e5/valgrind_10_0.tesh’ -> ‘08/tests/e5/valgrind_10_0.tesh’
‘ref/tests/e5/valgrind_10_1.tesh’ -> ‘08/tests/e5/valgrind_10_1.tesh’
‘ref/tests/e5/valgrind_11_0.tesh’ -> ‘08/tests/e5/valgrind_11_0.tesh’
‘ref/tests/e5/valgrind_11_1.tesh’ -> ‘08/tests/e5/valgrind_11_1.tesh’
‘ref/tests/e5/valgrind_12_0.tesh’ -> ‘08/tests/e5/valgrind_12_0.tesh’
‘ref/tests/e5/valgrind_12_1.tesh’ -> ‘08/tests/e5/valgrind_12_1.tesh’
‘ref/tests/e5/valgrind_13_0.tesh’ -> ‘08/tests/e5/valgrind_13_0.tesh’
‘ref/tests/e5/valgrind_13_1.tesh’ -> ‘08/tests/e5/valgrind_13_1.tesh’
‘ref/tests/e5/valgrind_14_0.tesh’ -> ‘08/tests/e5/valgrind_14_0.tesh’
‘ref/tests/e5/valgrind_14_1.tesh’ -> ‘08/tests/e5/valgrind_14_1.tesh’
‘ref/tests/e5/valgrind_15_0.tesh’ -> ‘08/tests/e5/valgrind_15_0.tesh’
‘ref/tests/e5/valgrind_15_1.tesh’ -> ‘08/tests/e5/valgrind_15_1.tesh’
‘ref/tests/e5/valgrind_16_0.tesh’ -> ‘08/tests/e5/valgrind_16_0.tesh’
‘ref/tests/e5/valgrind_16_1.tesh’ -> ‘08/tests/e5/valgrind_16_1.tesh’
‘ref/tests/e5/valgrind_17_0.tesh’ -> ‘08/tests/e5/valgrind_17_0.tesh’
‘ref/tests/e5/valgrind_17_1.tesh’ -> ‘08/tests/e5/valgrind_17_1.tesh’
‘ref/tests/e5/valgrind_18_0.tesh’ -> ‘08/tests/e5/valgrind_18_0.tesh’
‘ref/tests/e5/valgrind_18_1.tesh’ -> ‘08/tests/e5/valgrind_18_1.tesh’
‘ref/tests/e5/verify’ -> ‘08/tests/e5/verify’
‘ref/tests/e5/verify-new’ -> ‘08/tests/e5/verify-new’
‘ref/tests/e5/expected’ -> ‘08/tests/e5/expected’
‘ref/tests/e5/expected/00.out’ -> ‘08/tests/e5/expected/00.out’
‘ref/tests/e5/expected/01.out’ -> ‘08/tests/e5/expected/01.out’
‘ref/tests/e5/expected/02.out’ -> ‘08/tests/e5/expected/02.out’
‘ref/tests/e5/expected/03.out’ -> ‘08/tests/e5/expected/03.out’
‘ref/tests/e5/expected/04.out’ -> ‘08/tests/e5/expected/04.out’
‘ref/tests/e5/expected/05.out’ -> ‘08/tests/e5/expected/05.out’
‘ref/tests/e5/expected/06.out’ -> ‘08/tests/e5/expected/06.out’
‘ref/tests/e5/expected/07.out’ -> ‘08/tests/e5/expected/07.out’
‘ref/tests/e5/expected/08.out’ -> ‘08/tests/e5/expected/08.out’
‘ref/tests/e5/input’ -> ‘08/tests/e5/input’
‘ref/tests/e5/input/e00_0.amarela’ -> ‘08/tests/e5/input/e00_0.amarela’
‘ref/tests/e5/input/e00_1.amarela’ -> ‘08/tests/e5/input/e00_1.amarela’
‘ref/tests/e5/input/e01_0.amarela’ -> ‘08/tests/e5/input/e01_0.amarela’
‘ref/tests/e5/input/e01_1.amarela’ -> ‘08/tests/e5/input/e01_1.amarela’
‘ref/tests/e5/input/e02_0.amarela’ -> ‘08/tests/e5/input/e02_0.amarela’
‘ref/tests/e5/input/e02_1.amarela’ -> ‘08/tests/e5/input/e02_1.amarela’
‘ref/tests/e5/input/e03_0.amarela’ -> ‘08/tests/e5/input/e03_0.amarela’
‘ref/tests/e5/input/e03_1.amarela’ -> ‘08/tests/e5/input/e03_1.amarela’
‘ref/tests/e5/input/e04_0.amarela’ -> ‘08/tests/e5/input/e04_0.amarela’
‘ref/tests/e5/input/e04_1.amarela’ -> ‘08/tests/e5/input/e04_1.amarela’
‘ref/tests/e5/input/e05_0.amarela’ -> ‘08/tests/e5/input/e05_0.amarela’
‘ref/tests/e5/input/e05_1.amarela’ -> ‘08/tests/e5/input/e05_1.amarela’
‘ref/tests/e5/input/e06_0.amarela’ -> ‘08/tests/e5/input/e06_0.amarela’
‘ref/tests/e5/input/e06_1.amarela’ -> ‘08/tests/e5/input/e06_1.amarela’
‘ref/tests/e5/input/e07_0.amarela’ -> ‘08/tests/e5/input/e07_0.amarela’
‘ref/tests/e5/input/e07_1.amarela’ -> ‘08/tests/e5/input/e07_1.amarela’
‘ref/tests/e5/input/e08_0.amarela’ -> ‘08/tests/e5/input/e08_0.amarela’
‘ref/tests/e5/input/e08_1.amarela’ -> ‘08/tests/e5/input/e08_1.amarela’
‘ref/tests/e5/input/e09_0.amarela’ -> ‘08/tests/e5/input/e09_0.amarela’
‘ref/tests/e5/input/e09_1.amarela’ -> ‘08/tests/e5/input/e09_1.amarela’
‘ref/tests/e5/input/e10_0.amarela’ -> ‘08/tests/e5/input/e10_0.amarela’
‘ref/tests/e5/input/e10_1.amarela’ -> ‘08/tests/e5/input/e10_1.amarela’
‘ref/tests/e5/input/e11_0.amarela’ -> ‘08/tests/e5/input/e11_0.amarela’
‘ref/tests/e5/input/e11_1.amarela’ -> ‘08/tests/e5/input/e11_1.amarela’
‘ref/tests/e5/input/e12_0.amarela’ -> ‘08/tests/e5/input/e12_0.amarela’
‘ref/tests/e5/input/e12_1.amarela’ -> ‘08/tests/e5/input/e12_1.amarela’
‘ref/tests/e5/input/e13_0.amarela’ -> ‘08/tests/e5/input/e13_0.amarela’
‘ref/tests/e5/input/e13_1.amarela’ -> ‘08/tests/e5/input/e13_1.amarela’
‘ref/tests/e5/input/e14_0.amarela’ -> ‘08/tests/e5/input/e14_0.amarela’
‘ref/tests/e5/input/e14_1.amarela’ -> ‘08/tests/e5/input/e14_1.amarela’
‘ref/tests/e5/input/e15_0.amarela’ -> ‘08/tests/e5/input/e15_0.amarela’
‘ref/tests/e5/input/e15_1.amarela’ -> ‘08/tests/e5/input/e15_1.amarela’
‘ref/tests/e5/input/e16_0.amarela’ -> ‘08/tests/e5/input/e16_0.amarela’
‘ref/tests/e5/input/e16_1.amarela’ -> ‘08/tests/e5/input/e16_1.amarela’
‘ref/tests/e5/input/e17_0.amarela’ -> ‘08/tests/e5/input/e17_0.amarela’
‘ref/tests/e5/input/e17_1.amarela’ -> ‘08/tests/e5/input/e17_1.amarela’
‘ref/tests/e5/input/e18_0.amarela’ -> ‘08/tests/e5/input/e18_0.amarela’
‘ref/tests/e5/input/e18_1.amarela’ -> ‘08/tests/e5/input/e18_1.amarela’
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found FLEX: /usr/bin/flex (found version "2.5.39") 
-- Found BISON: /usr/bin/bison (found version "3.0.2") 
-- Setting build type to 'Debug' as none was specified.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/schnorr/ensino/inf01147-compiladores/projeto/results/etapa5/b-08
Scanning dependencies of target cc_dict_main_example
[  8%] Building C object CMakeFiles/cc_dict_main_example.dir/src/cc_dict.c.o
[ 16%] Building C object CMakeFiles/cc_dict_main_example.dir/src/cc_dict_main_example.c.o
Linking C executable cc_dict_main_example
[ 16%] Built target cc_dict_main_example
[ 25%] [BISON][parser] Building parser with bison 3.0.2
[ 33%] [FLEX][scanner] Building scanner with flex 2.5.39
Scanning dependencies of target main
[ 41%] Building C object CMakeFiles/main.dir/scanner.c.o
[ 50%] Building C object CMakeFiles/main.dir/parser.c.o
[ 58%] Building C object CMakeFiles/main.dir/src/main.c.o
[ 66%] Building C object CMakeFiles/main.dir/src/cc_misc.c.o
[ 75%] Building C object CMakeFiles/main.dir/src/cc_gv.c.o
[ 83%] Building C object CMakeFiles/main.dir/src/cc_dict.c.o
[ 91%] Building C object CMakeFiles/main.dir/src/cc_list.c.o
[100%] Building C object CMakeFiles/main.dir/src/cc_tree.c.o
Linking C executable main
[100%] Built target main
09 git@bitbucket.org:gianei/compiladoresgianeigustavoforked.git Etapa_5
‘ref/tests/e5/’ -> ‘09/tests/e5’
‘ref/tests/e5/avaliacao_00_0.tesh’ -> ‘09/tests/e5/avaliacao_00_0.tesh’
‘ref/tests/e5/avaliacao_00_1.tesh’ -> ‘09/tests/e5/avaliacao_00_1.tesh’
‘ref/tests/e5/avaliacao_01_0.tesh’ -> ‘09/tests/e5/avaliacao_01_0.tesh’
‘ref/tests/e5/avaliacao_01_1.tesh’ -> ‘09/tests/e5/avaliacao_01_1.tesh’
‘ref/tests/e5/avaliacao_02_0.tesh’ -> ‘09/tests/e5/avaliacao_02_0.tesh’
‘ref/tests/e5/avaliacao_02_1.tesh’ -> ‘09/tests/e5/avaliacao_02_1.tesh’
‘ref/tests/e5/avaliacao_03_0.tesh’ -> ‘09/tests/e5/avaliacao_03_0.tesh’
‘ref/tests/e5/avaliacao_03_1.tesh’ -> ‘09/tests/e5/avaliacao_03_1.tesh’
‘ref/tests/e5/avaliacao_04_0.tesh’ -> ‘09/tests/e5/avaliacao_04_0.tesh’
‘ref/tests/e5/avaliacao_04_1.tesh’ -> ‘09/tests/e5/avaliacao_04_1.tesh’
‘ref/tests/e5/avaliacao_05_0.tesh’ -> ‘09/tests/e5/avaliacao_05_0.tesh’
‘ref/tests/e5/avaliacao_05_1.tesh’ -> ‘09/tests/e5/avaliacao_05_1.tesh’
‘ref/tests/e5/avaliacao_06_0.tesh’ -> ‘09/tests/e5/avaliacao_06_0.tesh’
‘ref/tests/e5/avaliacao_06_1.tesh’ -> ‘09/tests/e5/avaliacao_06_1.tesh’
‘ref/tests/e5/avaliacao_07_0.tesh’ -> ‘09/tests/e5/avaliacao_07_0.tesh’
‘ref/tests/e5/avaliacao_07_1.tesh’ -> ‘09/tests/e5/avaliacao_07_1.tesh’
‘ref/tests/e5/avaliacao_08_0.tesh’ -> ‘09/tests/e5/avaliacao_08_0.tesh’
‘ref/tests/e5/avaliacao_08_1.tesh’ -> ‘09/tests/e5/avaliacao_08_1.tesh’
‘ref/tests/e5/avaliacao_09_0.tesh’ -> ‘09/tests/e5/avaliacao_09_0.tesh’
‘ref/tests/e5/avaliacao_09_1.tesh’ -> ‘09/tests/e5/avaliacao_09_1.tesh’
‘ref/tests/e5/avaliacao_10_0.tesh’ -> ‘09/tests/e5/avaliacao_10_0.tesh’
‘ref/tests/e5/avaliacao_10_1.tesh’ -> ‘09/tests/e5/avaliacao_10_1.tesh’
‘ref/tests/e5/avaliacao_11_0.tesh’ -> ‘09/tests/e5/avaliacao_11_0.tesh’
‘ref/tests/e5/avaliacao_11_1.tesh’ -> ‘09/tests/e5/avaliacao_11_1.tesh’
‘ref/tests/e5/avaliacao_12_0.tesh’ -> ‘09/tests/e5/avaliacao_12_0.tesh’
‘ref/tests/e5/avaliacao_12_1.tesh’ -> ‘09/tests/e5/avaliacao_12_1.tesh’
‘ref/tests/e5/avaliacao_13_0.tesh’ -> ‘09/tests/e5/avaliacao_13_0.tesh’
‘ref/tests/e5/avaliacao_13_1.tesh’ -> ‘09/tests/e5/avaliacao_13_1.tesh’
‘ref/tests/e5/avaliacao_14_0.tesh’ -> ‘09/tests/e5/avaliacao_14_0.tesh’
‘ref/tests/e5/avaliacao_14_1.tesh’ -> ‘09/tests/e5/avaliacao_14_1.tesh’
‘ref/tests/e5/avaliacao_15_0.tesh’ -> ‘09/tests/e5/avaliacao_15_0.tesh’
‘ref/tests/e5/avaliacao_15_1.tesh’ -> ‘09/tests/e5/avaliacao_15_1.tesh’
‘ref/tests/e5/avaliacao_16_0.tesh’ -> ‘09/tests/e5/avaliacao_16_0.tesh’
‘ref/tests/e5/avaliacao_16_1.tesh’ -> ‘09/tests/e5/avaliacao_16_1.tesh’
‘ref/tests/e5/avaliacao_17_0.tesh’ -> ‘09/tests/e5/avaliacao_17_0.tesh’
‘ref/tests/e5/avaliacao_17_1.tesh’ -> ‘09/tests/e5/avaliacao_17_1.tesh’
‘ref/tests/e5/avaliacao_18_0.tesh’ -> ‘09/tests/e5/avaliacao_18_0.tesh’
‘ref/tests/e5/avaliacao_18_1.tesh’ -> ‘09/tests/e5/avaliacao_18_1.tesh’
‘ref/tests/e5/execute.sh’ -> ‘09/tests/e5/execute.sh’
‘ref/tests/e5/valgrind_00_0.tesh’ -> ‘09/tests/e5/valgrind_00_0.tesh’
‘ref/tests/e5/valgrind_00_1.tesh’ -> ‘09/tests/e5/valgrind_00_1.tesh’
‘ref/tests/e5/valgrind_01_0.tesh’ -> ‘09/tests/e5/valgrind_01_0.tesh’
‘ref/tests/e5/valgrind_01_1.tesh’ -> ‘09/tests/e5/valgrind_01_1.tesh’
‘ref/tests/e5/valgrind_02_0.tesh’ -> ‘09/tests/e5/valgrind_02_0.tesh’
‘ref/tests/e5/valgrind_02_1.tesh’ -> ‘09/tests/e5/valgrind_02_1.tesh’
‘ref/tests/e5/valgrind_03_0.tesh’ -> ‘09/tests/e5/valgrind_03_0.tesh’
‘ref/tests/e5/valgrind_03_1.tesh’ -> ‘09/tests/e5/valgrind_03_1.tesh’
‘ref/tests/e5/valgrind_04_0.tesh’ -> ‘09/tests/e5/valgrind_04_0.tesh’
‘ref/tests/e5/valgrind_04_1.tesh’ -> ‘09/tests/e5/valgrind_04_1.tesh’
‘ref/tests/e5/valgrind_05_0.tesh’ -> ‘09/tests/e5/valgrind_05_0.tesh’
‘ref/tests/e5/valgrind_05_1.tesh’ -> ‘09/tests/e5/valgrind_05_1.tesh’
‘ref/tests/e5/valgrind_06_0.tesh’ -> ‘09/tests/e5/valgrind_06_0.tesh’
‘ref/tests/e5/valgrind_06_1.tesh’ -> ‘09/tests/e5/valgrind_06_1.tesh’
‘ref/tests/e5/valgrind_07_0.tesh’ -> ‘09/tests/e5/valgrind_07_0.tesh’
‘ref/tests/e5/valgrind_07_1.tesh’ -> ‘09/tests/e5/valgrind_07_1.tesh’
‘ref/tests/e5/valgrind_08_0.tesh’ -> ‘09/tests/e5/valgrind_08_0.tesh’
‘ref/tests/e5/valgrind_08_1.tesh’ -> ‘09/tests/e5/valgrind_08_1.tesh’
‘ref/tests/e5/valgrind_09_0.tesh’ -> ‘09/tests/e5/valgrind_09_0.tesh’
‘ref/tests/e5/valgrind_09_1.tesh’ -> ‘09/tests/e5/valgrind_09_1.tesh’
‘ref/tests/e5/valgrind_10_0.tesh’ -> ‘09/tests/e5/valgrind_10_0.tesh’
‘ref/tests/e5/valgrind_10_1.tesh’ -> ‘09/tests/e5/valgrind_10_1.tesh’
‘ref/tests/e5/valgrind_11_0.tesh’ -> ‘09/tests/e5/valgrind_11_0.tesh’
‘ref/tests/e5/valgrind_11_1.tesh’ -> ‘09/tests/e5/valgrind_11_1.tesh’
‘ref/tests/e5/valgrind_12_0.tesh’ -> ‘09/tests/e5/valgrind_12_0.tesh’
‘ref/tests/e5/valgrind_12_1.tesh’ -> ‘09/tests/e5/valgrind_12_1.tesh’
‘ref/tests/e5/valgrind_13_0.tesh’ -> ‘09/tests/e5/valgrind_13_0.tesh’
‘ref/tests/e5/valgrind_13_1.tesh’ -> ‘09/tests/e5/valgrind_13_1.tesh’
‘ref/tests/e5/valgrind_14_0.tesh’ -> ‘09/tests/e5/valgrind_14_0.tesh’
‘ref/tests/e5/valgrind_14_1.tesh’ -> ‘09/tests/e5/valgrind_14_1.tesh’
‘ref/tests/e5/valgrind_15_0.tesh’ -> ‘09/tests/e5/valgrind_15_0.tesh’
‘ref/tests/e5/valgrind_15_1.tesh’ -> ‘09/tests/e5/valgrind_15_1.tesh’
‘ref/tests/e5/valgrind_16_0.tesh’ -> ‘09/tests/e5/valgrind_16_0.tesh’
‘ref/tests/e5/valgrind_16_1.tesh’ -> ‘09/tests/e5/valgrind_16_1.tesh’
‘ref/tests/e5/valgrind_17_0.tesh’ -> ‘09/tests/e5/valgrind_17_0.tesh’
‘ref/tests/e5/valgrind_17_1.tesh’ -> ‘09/tests/e5/valgrind_17_1.tesh’
‘ref/tests/e5/valgrind_18_0.tesh’ -> ‘09/tests/e5/valgrind_18_0.tesh’
‘ref/tests/e5/valgrind_18_1.tesh’ -> ‘09/tests/e5/valgrind_18_1.tesh’
‘ref/tests/e5/verify’ -> ‘09/tests/e5/verify’
‘ref/tests/e5/verify-new’ -> ‘09/tests/e5/verify-new’
‘ref/tests/e5/expected’ -> ‘09/tests/e5/expected’
‘ref/tests/e5/expected/00.out’ -> ‘09/tests/e5/expected/00.out’
‘ref/tests/e5/expected/01.out’ -> ‘09/tests/e5/expected/01.out’
‘ref/tests/e5/expected/02.out’ -> ‘09/tests/e5/expected/02.out’
‘ref/tests/e5/expected/03.out’ -> ‘09/tests/e5/expected/03.out’
‘ref/tests/e5/expected/04.out’ -> ‘09/tests/e5/expected/04.out’
‘ref/tests/e5/expected/05.out’ -> ‘09/tests/e5/expected/05.out’
‘ref/tests/e5/expected/06.out’ -> ‘09/tests/e5/expected/06.out’
‘ref/tests/e5/expected/07.out’ -> ‘09/tests/e5/expected/07.out’
‘ref/tests/e5/expected/08.out’ -> ‘09/tests/e5/expected/08.out’
‘ref/tests/e5/input’ -> ‘09/tests/e5/input’
‘ref/tests/e5/input/e00_0.amarela’ -> ‘09/tests/e5/input/e00_0.amarela’
‘ref/tests/e5/input/e00_1.amarela’ -> ‘09/tests/e5/input/e00_1.amarela’
‘ref/tests/e5/input/e01_0.amarela’ -> ‘09/tests/e5/input/e01_0.amarela’
‘ref/tests/e5/input/e01_1.amarela’ -> ‘09/tests/e5/input/e01_1.amarela’
‘ref/tests/e5/input/e02_0.amarela’ -> ‘09/tests/e5/input/e02_0.amarela’
‘ref/tests/e5/input/e02_1.amarela’ -> ‘09/tests/e5/input/e02_1.amarela’
‘ref/tests/e5/input/e03_0.amarela’ -> ‘09/tests/e5/input/e03_0.amarela’
‘ref/tests/e5/input/e03_1.amarela’ -> ‘09/tests/e5/input/e03_1.amarela’
‘ref/tests/e5/input/e04_0.amarela’ -> ‘09/tests/e5/input/e04_0.amarela’
‘ref/tests/e5/input/e04_1.amarela’ -> ‘09/tests/e5/input/e04_1.amarela’
‘ref/tests/e5/input/e05_0.amarela’ -> ‘09/tests/e5/input/e05_0.amarela’
‘ref/tests/e5/input/e05_1.amarela’ -> ‘09/tests/e5/input/e05_1.amarela’
‘ref/tests/e5/input/e06_0.amarela’ -> ‘09/tests/e5/input/e06_0.amarela’
‘ref/tests/e5/input/e06_1.amarela’ -> ‘09/tests/e5/input/e06_1.amarela’
‘ref/tests/e5/input/e07_0.amarela’ -> ‘09/tests/e5/input/e07_0.amarela’
‘ref/tests/e5/input/e07_1.amarela’ -> ‘09/tests/e5/input/e07_1.amarela’
‘ref/tests/e5/input/e08_0.amarela’ -> ‘09/tests/e5/input/e08_0.amarela’
‘ref/tests/e5/input/e08_1.amarela’ -> ‘09/tests/e5/input/e08_1.amarela’
‘ref/tests/e5/input/e09_0.amarela’ -> ‘09/tests/e5/input/e09_0.amarela’
‘ref/tests/e5/input/e09_1.amarela’ -> ‘09/tests/e5/input/e09_1.amarela’
‘ref/tests/e5/input/e10_0.amarela’ -> ‘09/tests/e5/input/e10_0.amarela’
‘ref/tests/e5/input/e10_1.amarela’ -> ‘09/tests/e5/input/e10_1.amarela’
‘ref/tests/e5/input/e11_0.amarela’ -> ‘09/tests/e5/input/e11_0.amarela’
‘ref/tests/e5/input/e11_1.amarela’ -> ‘09/tests/e5/input/e11_1.amarela’
‘ref/tests/e5/input/e12_0.amarela’ -> ‘09/tests/e5/input/e12_0.amarela’
‘ref/tests/e5/input/e12_1.amarela’ -> ‘09/tests/e5/input/e12_1.amarela’
‘ref/tests/e5/input/e13_0.amarela’ -> ‘09/tests/e5/input/e13_0.amarela’
‘ref/tests/e5/input/e13_1.amarela’ -> ‘09/tests/e5/input/e13_1.amarela’
‘ref/tests/e5/input/e14_0.amarela’ -> ‘09/tests/e5/input/e14_0.amarela’
‘ref/tests/e5/input/e14_1.amarela’ -> ‘09/tests/e5/input/e14_1.amarela’
‘ref/tests/e5/input/e15_0.amarela’ -> ‘09/tests/e5/input/e15_0.amarela’
‘ref/tests/e5/input/e15_1.amarela’ -> ‘09/tests/e5/input/e15_1.amarela’
‘ref/tests/e5/input/e16_0.amarela’ -> ‘09/tests/e5/input/e16_0.amarela’
‘ref/tests/e5/input/e16_1.amarela’ -> ‘09/tests/e5/input/e16_1.amarela’
‘ref/tests/e5/input/e17_0.amarela’ -> ‘09/tests/e5/input/e17_0.amarela’
‘ref/tests/e5/input/e17_1.amarela’ -> ‘09/tests/e5/input/e17_1.amarela’
‘ref/tests/e5/input/e18_0.amarela’ -> ‘09/tests/e5/input/e18_0.amarela’
‘ref/tests/e5/input/e18_1.amarela’ -> ‘09/tests/e5/input/e18_1.amarela’
-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Found FLEX: /usr/bin/flex (found version "2.5.39") 
-- Found BISON: /usr/bin/bison (found version "3.0.2") 
-- Setting build type to 'Debug' as none was specified.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/schnorr/ensino/inf01147-compiladores/projeto/results/etapa5/b-09
[  8%] [BISON][parser] Building parser with bison 3.0.2
[ 16%] [FLEX][scanner] Building scanner with flex 2.5.39
Scanning dependencies of target main
[ 25%] Building C object CMakeFiles/main.dir/scanner.c.o
[ 33%] Building C object CMakeFiles/main.dir/parser.c.o
[ 41%] Building C object CMakeFiles/main.dir/src/main.c.o
[ 50%] Building C object CMakeFiles/main.dir/src/cc_misc.c.o
[ 58%] Building C object CMakeFiles/main.dir/src/cc_gv.c.o
[ 66%] Building C object CMakeFiles/main.dir/src/cc_dict.c.o
[ 75%] Building C object CMakeFiles/main.dir/src/cc_list.c.o
[ 83%] Building C object CMakeFiles/main.dir/src/cc_tree.c.o
[ 91%] Building C object CMakeFiles/main.dir/src/cc_stack.c.o
[100%] Building C object CMakeFiles/main.dir/src/cc_gerador.c.o
Linking C executable main
[100%] Built target main
#+end_example
* 2016-06-25 Execução                                              :noexport:

#+begin_src sh :results output :session :exports both
  cd results/etapa5/
  for group in `ls -1d b-*`; do
    echo $group
    FILE="${group}_results.log"
    cd $group
    ctest -R aval -V > ../$FILE
    cat ../$FILE
    cd ..
  done > etapa5.log
cp etapa5.log ../../
#+end_src

#+RESULTS:

* 2016-06-25 Interpretação                                         :noexport:

#+begin_src sh :results output :session :exports both
  ET=etapa5
  cat ${ET}.log | sed "/^b-../d" |  csplit -z -f 'temp' -b '%02d.txt' - /Test\ project/ {*}
  TOTALTESTS=`cat temp01.txt | grep -e "#" | wc -l`
  rm temp00.txt
  DIR=${ET}
  mkdir -p $DIR/
  rm -rf $DIR/*
  mkdir -p $DIR/testes/
  SAIDACSV=$DIR/${ET}.csv
  echo "grupo,total,falhos,nota" > $SAIDACSV
  for i in temp*.txt; do
     FILE=$i
     GROUP=$(basename `cat $FILE | grep "Test project" | cut -d" " -f3-`)
     echo "== $GROUP == (total tests is $TOTALTESTS)"
     cat $FILE | sed "/^b-..$/d" | grep \(Failed\)
     #check existance of tests
     if [ `cat $FILE | grep "Total Test time" | wc -l` -eq 0 ]; then
       continue
     fi
     FAILEDTESTS=`cat $FILE | grep \(Failed\) | grep aval | wc -l`
     SUCCESSRATE=`echo "($TOTALTESTS-$FAILEDTESTS)/$TOTALTESTS*10" | bc -l`
     echo "Group $GROUP obtained $SUCCESSRATE success rate."
     echo "$GROUP,$TOTALTESTS,$FAILEDTESTS,$SUCCESSRATE" >> $SAIDACSV
  done > $DIR/${ET}-eval.log
  cp ${ET}.log $DIR
  cp -prf saida/* $DIR/testes/
  tar cfz ${ET}.tar.gz ${ET}
  cat ${ET}/${ET}.csv
#+end_src

#+RESULTS:
#+begin_example
250
27310
27207
28479
26471
29733
29617
36712
grupo,total,falhos,nota
b-01,38,4,8.94736842105263157890
b-02,38,6,8.42105263157894736840
b-03,38,7,8.15789473684210526310
b-04,38,0,10.00000000000000000000
b-06,38,18,5.26315789473684210520
b-08,38,9,7.63157894736842105260
b-09,38,6,8.42105263157894736840
b-09,38,2,9.47368421052631578940
#+end_example

3rd
- with my tests
#+BEGIN_EXAMPLE
b-01,38,4,8.94736842105263157890
b-02,38,6,8.42105263157894736840
b-03,38,7,8.15789473684210526310
b-04,38,0,10.00000000000000000000
b-06,38,18,5.26315789473684210520
b-08,38,9,7.63157894736842105260
b-09,38,6,8.42105263157894736840
b-09,38,2,9.47368421052631578940
#+END_EXAMPLE

2nd
- their own tests

#+BEGIN_EXAMPLE
b-01,38,6,8.42105263157894736840
b-02,38,0,10.00000000000000000000
b-03,38,9,7.63157894736842105260
b-04,38,14,6.31578947368421052630
b-06,38,30,2.10526315789473684210
b-08,38,9,7.63157894736842105260
b-09,38,6,8.42105263157894736840
b-09,38,2,9.47368421052631578940
#+END_EXAMPLE

1st

#+BEGIN_EXAMPLE
b-01,38,6,8.42105263157894736840
b-02,38,0,10.00000000000000000000
b-04,38,14,6.31578947368421052630
b-06,38,30,2.10526315789473684210
b-09,38,6,8.42105263157894736840
#+END_EXAMPLE
* 2016-07-03 Nova interpretação                                    :noexport:

#+begin_src sh :results output :session :exports both
cd results/etapa5
for i in `ls *results.log`
do
echo -n "$i ===> "
cat $i | grep "out of"
done
#+end_src

#+RESULTS:
: b-01_results.log ===> 89% tests passed, 4 tests failed out of 38
: b-02_results.log ===> 84% tests passed, 6 tests failed out of 38
: b-03_results.log ===> 82% tests passed, 7 tests failed out of 38
: b-04_results.log ===> 100% tests passed, 0 tests failed out of 38
: b-06_results.log ===> 53% tests passed, 18 tests failed out of 38
: b-08_results.log ===> 76% tests passed, 9 tests failed out of 38
: b-09_results.log ===> 84% tests passed, 6 tests failed out of 38

3rd
- with my tests

#+BEGIN_EXAMPLE
b-01,38,4,8.94736842105263157890
b-02,38,6,8.42105263157894736840
b-03,38,7,8.15789473684210526310
b-04,38,0,10.00000000000000000000
b-06,38,18,5.26315789473684210520
b-08,38,9,7.63157894736842105260
b-09,38,6,8.42105263157894736840
b-09,38,2,9.47368421052631578940
#+END_EXAMPLE

2nd
- their own tests

#+BEGIN_EXAMPLE
b-01,38,6,8.42105263157894736840
b-02,38,0,10.00000000000000000000
b-03,38,9,7.63157894736842105260
b-04,38,14,6.31578947368421052630
b-06,38,30,2.10526315789473684210
b-08,38,9,7.63157894736842105260
b-09,38,6,8.42105263157894736840
b-09,38,2,9.47368421052631578940
#+END_EXAMPLE
