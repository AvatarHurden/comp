# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+Title: Projeto de Compilador -- Entrega, Avaliação, Regras
#+Author: Lucas Mello Schnorr
#+Date: schnorr@inf.ufrgs.br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [10pt, twocolumn, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

O trabalho consiste no projeto e implementação de um compilador
para uma determinada gramática de linguagem de programação
especificada em cada semestre. Este documento estabelece as regras
gerais do projeto de compilador, com links para especificação das
etapas.

** Especificação, pesos, e prazos de entrega

A entrega sempre é até as 23:59 do dia. Tanto o commit da sua solução
quanto a submissão do formulário devem acontecer no prazo. O link para
o formulário único que permite realizar a entrega de todas as etapas
encontra-se abaixo.

*** Prazos e Especificação

| Etapa | Descrição e Especificação            | Peso (%) | Cumul. (%) |    Entrega | Resultados |
|-------+--------------------------------------+----------+------------+------------+------------|
| E1    | [[./etapa1.org][Análise Léxica]]                       |       10 |         10 | 2018-03-19 |            |
| E2    | [[./etapa2.org][Análise Sintática]]                    |       15 |         25 | 2018-04-09 |            |
| E3    | [[./etapa3.pdf][Árvore Sintática Abstrata]] ([[./etapa3.pdf][PDF]])      |       15 |         40 | 2018-04-25 |            |
| E4    | [[./etapa4.org][Análise Semântica]]                    |       15 |         55 | 2018-05-09 |            |
| E5    | (obsoleto) [[./etapa5.org][Geração de Código]] ([[./etapa5.pdf][PDF]])   |       20 |         75 | 2018-05-28 |            |
| E6    | (obsoleto) [[./etapa6.org][Suporte de Execução]] ([[./etapa6.pdf][PDF]]) |       15 |         90 | 2018-06-27 |            |
| E7    | (obsoleto) [[./etapa7.org][Otimização]] ([[./etapa7.pdf][PDF]])          |       10 |        100 | 2018-07-08 |            |
|-------+--------------------------------------+----------+------------+------------+------------|

*** Procedimento de Entrega

|-----------------------|
| [[https://goo.gl/forms/KDnyCLPLULr6AcfF2][Formulário de entrega]] |
|-----------------------|

** Formação dos Grupos

Os trabalhos devem ser realizados em grupos de *dois alunos*.  Uma vez
formado, o grupo informa os seus membros ao professor, por e-mail. A
definição de grupos é definitiva, válida do início ao fim do semestre.

** Regras de desenvolvimento

Requerimentos obrigatórios na realização de todas as etapas.  A função
=main= deve estar em um arquivo chamado =main.c=. Ela não deve ser
alterada sob qualquer hipótese. Outros arquivos fontes são encorajados
de forma a manter a modularidade do código fonte. Sugere-se e edição
do arquivo =cc_misc.c=, com suas funções =main_init= e =main_finalize= para a
alocar e liberar estruturas de dados globais.
A entrada para o =flex= deve estar em um arquivo com o nome
=scanner.l=. As subseções seguintes apresentam os requisitos técnicos
obrigatórios nesta etapa do projeto de compiladores. Elas serão
consideradas na avaliação subjetiva da etapa.

*** Git e Cmake

A solução desta etapa do projeto de compiladores deve vir acompanhada
de um repositório git que manteve o histórico de desenvolvimento do
projeto. Cada commit deve ser o menor possível (utilize a ferramenta
=git gui= para comitar apenas parte do arquivo modificado). Cada ação de
commit deve vir com mensagens significativas explicando a mudança
feita. Todos os membros do grupo devem ter feito ações de commit, pelo
fato deste trabalho ser colaborativo. Estas duas ações -- mensagens de
commit e quem fez o commit -- serão obtidas pelo professor através do
comando =git log= na raiz do repositório solução do grupo. O comando =git
blame= também será utilizado para verificar a participação de todos os
membros do grupo na construção da etapa.

*** Código Inicial

O código inicial do projeto encontra-se em um repositório público no
Github cujo link é https://github.com/schnorr/pc. Sabendo que o
repositório do grupo deve ser obrigatoriamente *privado*, deve-se evitar
um clique em *Fork* pois sendo o repositório original público, o fork
também o será. Sendo assim, recomenda-se criar um repositório novo com
todo o histórico do repositório de referência do professor cujo link
está acima, assim podendo criar um repositório privado. Receber novas
modificações do repositório base é apenas questão de adicionar um
remote (do repositório de referência do professor) e executar um pull
desse remote. Caso o grupo já tenha criado um fork e iniciado o
desenvolvimento do trabalho, pode-se consultar [[https://stackoverflow.com/questions/10065526/github-how-to-make-a-fork-of-public-repository-private ][esta questão no
StackOverflow]] para torná-lo privado. Alternativamente, na situação
onde o grupo deseja utilizar o GitHub, pode-se adotar a [[https://github.com/new/import][ferramenta de
importação de projeto do GitHub]]. As alterações do repositório de
referência podem ser obtidas da mesma forma descrita acima (com adição
de remote e pull).

Abaixo uma listagem de comandos para clonar o repositório com o código
inicial e envio dos commits para o repositório do grupo, assumindo que
este já foi criado em algum serviço de GIT.

#+BEGIN_EXAMPLE
git clone https://github.com/schnorr/pc
cd pc
git remote add MEUREPO https://seuservidorgit.com/seusuario/seurepositorio/
git push MEUREPO master
#+END_EXAMPLE

O código inicial do compilador pode ser inicialmente compilado
(supondo que as bibliotecas necessárias para compilação já estão
instaladas) da seguinte forma:

#+BEGIN_EXAMPLE
mkdir build
cd build
cmake ..
make
#+END_EXAMPLE

Note que os arquivos =scanner.l= e =parser.y= deverão ser fortemente
modificados para atender aos requisitos deste trabalho. Eles estão
praticamente vazios. A solução do aluno deve partir deste código
inicial e utilizar a mesma estrutura de diretórios. Se novos arquivos
de código fonte devem ser adicionados, modifique o arquivo
=CMakeLists.txt= apropriadamente para que o novo arquivo seja incluído
no processo de compilação.

*** Configurar Makefiles para Etapa

Para configurar o sistema de compilação para uma determinada etapa, os
passos abaixo devem ser realizados (supondo etapa 2). Adicionalmente,
pode-se realizar estes passos através da interface do =ccmake= (pacote
=cmake-curses-gui= em um Linux Debian).

#+BEGIN_EXAMPLE
cmake -DE1=OFF -DE2=ON .
make
#+END_EXAMPLE

*** Atualizações do Professor

O professor pode efetuar alterações no repositório de referência. Os
alunos deverão pegar as modificações da seguinte forma (supondo que
origin é o repositório de referência do professor):
#+BEGIN_EXAMPLE
git pull origin master
#+END_EXAMPLE

Conflitos podem acontecer. Se o grupo não souber como resolvê-los,
entre em contato com o professor. Entender como funciona
o GIT e adotar boas práticas de desenvolvimento em equipe ajuda a
resolver os problemas.

*** Avaliação automática

Um conjunto de testes já estão disponíveis no repositório para que o
grupo possa se autoavaliar. Para lançar estes testes, depois de ter
compilado o programa utilizando as instruções acima e com a ferramenta
=valgrind= instalada, execute o seguinte comando no diretório onde
encontra-se os arquivos compilados (supondo Etapa 1):

#+BEGIN_EXAMPLE
ctest -R e1
#+END_EXAMPLE

*** Formato de Entrega

O líder do grupo deve marcar, utilizando uma *tag* do git, o commit que
representa a solução do grupo para uma determinada etapa. Utilize uma
tag significativa, como por exemplo *E1* ou *Etapa1* para a etapa 1. Para
enviar a tag para o seu servidor, uma opção específica deve ser
utilizada, da seguinte forma:

#+BEGIN_EXAMPLE
git push --tags ORIGIN master
#+END_EXAMPLE

Em seguida, *antes do prazo limite de entrega estabelecido*, submeta
(através do formulário único de submissão) as seguintes informações:
- O identificador da etapa (E1, E2, ...)
- O link para que o professor possa clonar o repositório
- O nome da tag que marca o commit que representa a solução

Tenha certeza que o professor possa clonar o repositório. *Observação*:
A solução deve ser baseada nos arquivos inicialmente oferecidos aos
alunos. O professor deve poder executar a sequência de comandos para
avaliar o resultado do trabalho (supondo Etapa 3):

#+begin_src R :results output :session :exports both
cd diretorio-com-a-solucao
mkdir build
cd build
cmake -DE1=OFF -DE2=OFF -DE3=ON ..
make
ctest -R e3
#+end_src

*** Recomendações

Executem vários testes. Verifiquem a conformidade com cada uma das
regras desse formato e da especificação da etapa. Verifiquem se o
trabalho pode ser compilado e rodado em outro sistema fora o usado
para desenvolvimento. Incluam os nomes dos componentes do grupo em
comentários no início de todos os códigos fonte do seu
trabalho. Retirem dúvidas com o professor antes do prazo final.

** Avaliação das Etapas

Cada etapa do projeto de compiladores é avaliada objetiva e
subjetivamente, com pesos iguais. A *nota objetiva* é definida por
testes automáticos (quando possível) que verificam as soluções dos
alunos. Esta nota é atribuída igualmente para todos os membros do
grupo. A *nota subjetiva* é definida pelo professor, mediante
apresentação pelos membros do grupo em aula definida para tal. Esta
nota compreende a apresentação do trabalho, o conhecimento técnico, as
opções argumentadas de implementação, a originalidade, a qualidade do
cógigo, a legibilidade, os comentários assim como a organização do
código e os recursos apresentados. A nota subjetiva pode ser diferente
para cada membro do grupo.

*Importante*
- Todos os membros do grupo devem estar presente na apresentação obrigatória
- Etapas não apresentadas na data prevista recebem nota zero.

** Política de Atraso

Todas as etapas do projeto de compilador tem a mesma política de
atraso. As soluções de cada etapa devem ser enviadas até as datas de
entrega especificadas neste local. As soluções recebidas antes da data
limite serão avaliadas normalmente, até 100%. Qualquer solução
recebida após a data limite inicialmente estabelecida receberá nota
zero.

